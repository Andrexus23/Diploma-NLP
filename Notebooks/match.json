[
	{
		"id_rp": "1000",
		"id_proj": "15",
		"name_rp": "АЛГОРИТМЫ БЕСПИЛОТНОГО ТРАНСПОРТА",
		"name_proj": "Разработка системы движения роя дронов в пространстве",
        "text_rp": "Данный курс знакомит слушателей с основами управления беспилотными автомобилями. Рассматриваются основные компоненты таких сиcтем: модели и методы восприятия информации при помощи сенсоров или человеко-машинного интерфейса; методы определения собственного положения на известной и неизвестной карте; методы планирования пути (в том числе на графах и не на графах); фреймворк, подходящий для разработки собственных решений для беспилотных транспортных средств. Данный курс знакомит с уровнями автономности беспилотных средств, с основами машинного обучения, в том числе при помощи нейросетей, операционной системой Robot Operating System, являющейся де-факто стандартным решением для многих роботов, в том числе бепилотных автомобилей. Курс позволяет освоить основные приёмы программирования в ROS, алгоритмов локализации и построения карты (SLAM), алгоритмов машинного зрения . Сформировать у обучающихся знания, умения и навыки обоснованного и результативного применения существующих методов, моделей, а также алгоритмов для управления беспилотными автомобилями и другими автономными интеллектуальными системами. Обучить применению существующих, а также освоению новых методов и моделей беспилотного транспорта. Дать знания о существующих методах и алгоритмах беспилотного транспорта, а также методологии построения систем беспилотного транспорта. Дать умения разрабатывать алгоритмы для беспилотного транспорта и применять методы компьютерного зрения и машинного обучения для решения задач беспилотного транспорта. Привить навыки разработки и анализа алгоритмов автономного движения, наблюдения окружающего мира, фильтрации данных. ИДЗ  заключается в аналитическом поиске необходимой информации для решения поставленной задачи, решении и развернутом описании решения. Источниками информации являются лекции, основная и дополнительная литература, интернет-источники. Задание на ИДЗ выдается в начале семестра. Отчеты по ИДЗ оформляются в соответствии с требованиями к отчету по лабораторной работе, приведенными на сайте СПбГЭТУ \"ЛЭТИ\" в разделе \"Шаблоны оформления студенческих работ\". Объем отчета не менее 5 страниц формата А4, отчет представляется в электронном виде. Примерные темы ИДЗ: Разработайте приложение, основанное на применении ROS, обрабатывающее данные лазерного дальномера Разработайте или модифицируйте алгоритм SLAM для решения задачи одновременной локализации и построения карты Разработайте или модифицируйте алгоритм семантической сегментации изображений при помощи нейросетей Разработайте алгоритм движения беспилотного автомобиля в симуляторе. . ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 1 Дисциплина Алгоритмы беспилотного транспорта 1. Локализация на известной карте. Структуры данных для хранения карты в памяти. 2. Скан матчер на основе стохастического поиска. Достоинства, недостатки и область применения УТВЕРЖДАЮ Заведующий кафедрой . Введение. Общие сведения об автономных и интеллектуальных системах. Беспилотные автомобили. Задачи, решаемые беспилотными автомобилями. Уровни автоматизации беспилотных автомобилей. Датчики и сенсоры. Стек алгоритмов, выполняемых беспилотными автомобилями. Введение в Robot Operating System. Назначение ROS. Место ROS в беспилотных автомобилях. Программная единица в ROS. Методы взаимодействия между программными единицами. Разработка собственного приложения, использующего ROS. Программирование с использованием ROS. Подготовка CMake файлов, xml-файлов с параметрами. Запуск готовых приложений. Компиляция и сборка приложений ROS. Структура рабочего каталога. Разработка, запуск и логгирование собственных приложений. Использование пакетов, поставляемых с ROS. Визуализация графа взаимодействий программных модулей ROS. Назначение и применение пакетов ROS для упрощения разработки. Назначение и применение пакета TF. Использование сгенерированного исходного кода. Инструменты для визуализации и отладки приложений, использующих ROS. Пакет RVIZ, семейство пакетов rqt, пакет Rqt_graph, пакет Gazebo. Настройка файлов логов. Отладка средствами ROS. Многопоточность в ROS. Введение в машинное обучение. Обучение с учителем. Задача классификации и регрессии. Обучение без учителя. Кластеризация. Нейронные сети. Понятие нейрона, перцептрона и простейшая нейронная сеть. Слои в нейронных сетях. Применение нейронных сетей. Нейронные сети прямого распределения. Перцепторны. Полносвязные сети. Нейронная сеть Хопфилда. Свёрточные нейронные сети. Развёртывающие нейронные сети. Классификация и кластеризация изображений при помощи нейронных сетей. Нейросеть Кохонена. Функционирование сети. Современные модификации свёрточных нейросетей для задачи кластеризации. Недостатки. Ускорение работы. Синтетические данные для обучения. Задача фильтрации данных. Постановка задачи фильтрации. Рекурсивный фильтр. Модель. Комплексирование. Априорная и апостериорная оценка. Расширенный фильтр Калмана. Матричная линеаризация. Фильтр Калмана со старением. Задача одновременной локализации и построения карты SLAM. Постановка задачи SLAM. Решение на базе фильтра Калмана. Фильтр частиц. FastSLAM. Gmappnig. Scan matching. Графовые подходы. Методы оценки качества SLAM алгоритмов. Применение SLAM к задаче беспилотных автомобилей. Методы представления и хранения карты. Карта в EKF SLAM. Сетка занятости. Детали реализации графовых алгоритмов SLAM. Определение и замыкание циклов в графе. Методы визуализации карты в ROS. Методы оценки качества построенной карты. Задача построения пути. Задача поиска пути на графе. Алгоритм Дейкстры. А*. Методы построения пути на неизвестной карте. Локальный планировщик пути. PID-регулятор. Синергия глобального и локального планировщика. Duckietown как модель города с беспилотными автомобилями. Назначение Duckietown. Описание составных частей. Робот Duckiebot. Компоненты робота. Автомат состояний Ducketown. Применение Duckietown в качестве модели беспилотного транспорта. Автоматизация движения по проложенному маршруту в симуляторе Duckietown. Датчики Duckiebot. Применение алгоритмов SLAM к Duckietown. Построение маршрута в Duckietown. Симулятор Duckitown. Запуск всех компонентов беспилотного автомобиля в симуляторе. Заключение. Обсуждение состояния прикладной технологии автопилотируемых транспортных средств на ближайшие годы.",
		"text_proj": "Разработка системы движения роя дронов в пространстве. Объект исследования: движения роя Предмет исследования: безопасность движения каждого участника роя в штатных и экстренных случаях Цель : обеспечить безопасность каждому участнику роя дронов во время выполнения манёвров и иных задач, для выполнения которых предполагается привлечение несколько дронов. Проблема: обеспечивать каждого дрона самостоятельной системой избегания препятствий дорого и неэффективно Формулировка задачи: необходимо сформулировать аппаратную и программную конфигурацию роя дронов так, чтобы в процессе выполнения полётной задачи с привлечением роя, обеспечивалась безопасность каждого участника роя индивидуально или в групповом взаимодйствии. Формулирование аппаратной части подразумевает ответ на вопрос, сколько дронов в рою и какими датчиками должны быть оснащены для достижения тех или иных показателей эффективности. Формирование программной конфигурации подразумевает реализацию алгоритма действий в штатной и нештатных ситуаций для обеспечения безопасности уастников роя. Обязательно должен: знать: язык программирования (С++ или Java или Python); уметь: работать в команде. Желательно должен: знать: математические сновы теории графов (алгоритм Дейкстры, А*.); владеть: английским языком достаточным для чтения статей. В результате получит: знания: математические основы движения дронов обособленно и в рое, алгоритмы машинного обучения; умения: проведение научного исследования, прикладное создание программного фреймворка; опыт: работы на предприятии в условиях проекта, близкого к реальному. Сформировать список методов безопасного роевого движения. 1.Сформировать список методов безопасного роевого движения. Создать framework, позволяющий решать задачу идентификации несколькими методами. 1.Создать framework, позволяющий решать задачу идентификации несколькими методами. Сформировать критерии сравнения алгоритмов. 1.Сформировать критерии сравнения алгоритмов. Сравнить запрограммированные алгоритмы по выбранным критериям. 1.Сравнить запрограммированные алгоритмы по выбранным критериям.",
		"need_match": true
	},
	{
		"id_rp": "1005",
		"id_proj": "40",
		"name_rp": "АНАЛИЗ ДАННЫХ В ИСКУССТВЕННОМ ИНТЕЛЛЕКТЕ",
		"name_proj": "Роботизированная система машинного творчества ARTCYBE",
		"text_rp": "Освещаемые в курсе теоретические и прикладные вопросы полезны для студентов, специализирующихся в области управления и информационных технологий в технических системах, компьютерного и математического моделирования. В курсе даются основы Data Science, включающие вопросы сбора, хранения и подготовки данных (выявление аномалий в сырых данных, очистка данных от шума, дополнение данных, заполнение (удаление) пропущенных значений), классификации и кластеризации, поиска ассоциативных правил, интерполяции, экстраполяции и аппроксимации, корреляционного и регрессионного анализа, искусственного интеллекта и машинного обучения, нейронных сетей, сверточных нейронных сетей. Кроме того, в курсе рассматривается современная вычислительная база в контексте решения задач Data Science (CUDA, GPU, FPGA, SoC). Уделяется внимание решению практических задач с использованием современных программно\u00ADаппаратных средств (MATLAB, Python, R, GPU).. Цель дисциплины - изучение математических моделей, методов и алгоритмов анализа данных и искусственного интеллекта и приобретения навыков их применения в профессиональной деятельности и навыков выбирать и применять методы сбора и извлечения знаний. Формирование знаний и умений, необходимых для решения задач в области анализа данных и искусственного интеллекта с использованием современной вычислительной базы. Приобретение теоретических знаний в области анализа данных и искусственного интеллекта. Умение использования современной вычислительной базы для решения задач в области анализа данных и искусственного интеллекта. Выбирать и разрабатывать программные компоненты систем искусственного интеллекта и ставить задачи по разработке или совершенствованию методов и алгоритмов для решения комплекса задач предметной области. Получение практических навыков использования современной вычислительной базы для решения задач в области искусственного интеллекта.. Контрольная работа проводится в виде тестирования. Сигнал, определенный в фиксированные (заданные) моменты времени и являющийся непрерывным по состоянию, называется: 1.     Дискретным сигналом 2.     Аналоговым сигналом 3.     Цифровым сигналом Реакция системы на цифровой единичный импульс при нулевых начальных условиях называется: 1.     Переходной характеристикой 2.     Импульсной характеристикой 3.     Амплитудно-частотной характеристикой Растекание спектра – это: 1.     Появление дополнительных составляющих в спектральном составе последовательности при вычислении ДПФ 2.     Повышение частоты следования спектральных линий (уменьшение периода дискретизации по частоте) за счет дополнения последовательности нулями 3.     Расширение спектра за счет умножения сигнала на специальную расширяющую последовательность Фильтр, пропускающий спектральные составляющие сигнала в заданной полосе частот и подавляющий спектральные составляющие сигнала за пределами данной полосы, называется: 1.     Фильтр нижних частот 2.     Полосно-пропускающий (полосовой) фильтр 3.     Полосно-задерживающий (режекторный) фильтр Укажите, какая из нижеприведенных задач решается с использованием обратной идентификации и адаптивных фильтров: 1.     Оценивание импульсной характеристики неизвестной системы 2.     Очистка сигнала от шума 3.     Компенсация искажений, вносимых неизвестной системой Сигнал, определенный в фиксированные (заданные) моменты времени и являющийся квантованным по состоянию, называется:        1.       Дискретным сигналом        2.       Аналоговым сигналом        3.       Цифровым сигналом Реакция системы на цифровой единичный скачок при нулевых начальных условиях называется:        1.       Переходной характеристикой        2.       Импульсной характеристикой        3.       Амплитудно-частотной характеристикой Фильтр, подавляющий спектральные составляющие сигнала в заданной полосе частот и пропускающий спектральные составляющие сигнала за пределами данной полосы, называется:        1.       Фильтр верхних частот        2.       Полосно-пропускающий (полосовой) фильтр        3.       Полосно-задерживающий (режекторный) фильтр Изменение частоты дискретизации сигнала в нецелое число раз называется:        1.       Интерполяцией        2.       Децимацией        3.       Передискретизацией Сигнал, непрерывный по времени и по состоянию называется:        1.       Дискретным сигналом        2.       Аналоговым сигналом        3.       Цифровым сигналом     ASIC – это 1.     Класс ПЛИС 2.     Фирма-изготовитель ПЛИС 3.     Заказная микросхема на основе программируемой логики       Открытым стандартом для написания программ для GPU в настоящее время является 1.     OpenCL 2.     C++ 3.     JAVA Именно эти две фирмы являются мировыми лидерами в производстве ПЛИС 1.     Intel FPGA (Altera), Atmel 2.     Intel FPGA (Altera), Xilinx 3.     Xilinx, Atmel          Именно это семейство ПЛИС фирмы Intel FPGA (Altera) относится к SOC 1.     CycloneV 2.     ArriaII 3.     MaxV          К семействам ПЛИС фирмы Intel FPGA (Altera) не относится следующее 1.     Cyclone 2.     Virtex 3.     Arria       Такую разрядность имеют DSP блоки в FPGA фирмы Intel FPGA (Altera) 1.     9x9 2.     18x18 3.     20x20       Помимо фирмы Nvidia технология распределённых вычислений на графических процессорах есть у фирмы 1.     Intel 2.     AMD 3.     Apple        Барьер для группы процессов или потоков означает, что 1.     Каждый поток (процесс) должен остановиться в этой точке и подождать достижения барьера всеми потоками (процессами) группы 2.     Выполнение программы дальше невозможно 3.     Все потоки после барьера объединяются       IDE среда фирмы Intel FPGA (Altera) для проектирования на ПЛИС называется 1.     QuartusII 2.     Vivaldo 3.     AVR-studio         Утилита в среде QuartusII для отладки в реальном времени называется 1.     SignalTap 2.     SignalProbe 3.     ChipPlanner. Билет содержит 2 теоретических вопроса из списка (из каждой группы \u00AD 1 вопрос). . Введение. Искусственный интеллект. Машинное обучение. Общая постановка задачи обучения по прецедентам. Типология обучения задач по прецедентам. Бустинг. Бэггинг. Области применения ИИ. Искусственный интеллект и машинное обучение. Как подготовить данные к моделированию: 5 операций Data Preparation. Почему нужно готовить данные к моделированию. Как Data Scientist готовит данные: методы и средства Data Preparation. Отберем то, что нужно Data Mining: как сформировать датасет для машинного обучения. Что такое датасет для Data Mining и из чего он состоит. Где искать датасеты. Каким бывает dataset: типы выборок. Как сформировать выборку для Data Mining. Зачем нужна очистка данных для Data Mining: 10 главных проблем подготовки датасета и способы их решения. Что такое очистка данных для Data Mining. От чего надо чистить большие данные. Как Data Scientist чистит данные: детали фазы Data Preparation Это не баг, а фича: генерация признаков для Data Mining. Признаки для Data Mining: определение и виды. Как проходит генерация признаков: 3 задачи этого этапа Data Mining и способы их решения.Data Preparation: полет нормальный – что такое нормализация данных и зачем она нужна. Сбор, хранение и подготовка данных. Дополнение данных, заполнение (удаление) пропущенных значений. Сырые данные. Выбросы. Причины выбросов. Определение выбросов. Критериии выбросов I. Гистограмма. Ящик с усами. Критерий Шовене. Критерий Граббса. Критерий Пирса. Критерий Диксона. Правило 3 сигм. Критерии выбросов II. Статистические тесты. Модельные тесты. Итерационные методы. Метрические методы. Методы подмены задачи. Методы машинного обучения. Ансамбли алгоритмов. ROC\u00ADанализ. Алгоритмы очистки сигналов от шума. Преобразование Фурье. Вейвлет\u00ADпреобразование. Фильтр Винера. Алгоритмы Empirical Mode Decomposition и Intrinsic Time\u00ADScale Decomposition. Алгоритмы очистки изображений от шума. Типовые шумы. Виды шумов: аналоговый, цифровой. Методы шумоподавления: пространственные, временные, пространственно\u00ADвременные. Качество шумоподавления. Метрики качества: PSNR и SSIM. Усредняющий фильтр. Медианный фильтр. Гауссовский фильтр. Билатеральный фильтр. Алгоритм NLM. Подготовка данных. Выявление аномалий в сырых данных, очистка данных от шума. Задача классификации. Типы входных данных. Типы классов. Области применения. Формальная постановка задачи. Алгоритмы классификации. Метод ближайших соседей. Байесовский классификатор. Деревья решений. Классификация. Задача кластеризации. Типы входных данных. Цели кластеризации. Функции расстояния. Формальная постановка задачи. Алгоритмы кластеризации. Метод kсредних. Метод c\u00ADсредних. Генетический алгоритм. Кластеризация. Задача поиска ассоциативных правил. Формальная постановка задачи. Концепции. Процесс построения ассоциативных правил. Алгоритмы поиска ассоциативных правил. Поиск ассоциативных правил. Аппроксимация. Постановка задачи. Метод наименьших квадратов. Линейная аппроксимация. Логарифмическая аппроксимация. Экспоненциальная аппроксимация. Степенная аппроксимация. Интерполяция. Постановка задачи. Локальная и глобальная интерполяция. Интерполяционный многочлен Лагранжа. Интерполяционный многочлен Ньютона. Экстраполяция. Временные ряды. Компоненты временных рядов. Объединение компонентов временного ряда. Оценка тренда. Виды функциональных зависимостей. Выделение тренда. Метод скользящего среднего. Метод экспоненциального сглаживания. Прогнозирование. Двойное экспоненциальное сглаживание. Метод Хольт\u00ADВинтерса. Качество прогнозирования. Аппроксимация, интерполяция и экстраполяция. Временные ряды: тренд, сезонность, шум. Прогнозирование. Аппроксимация. Постановка задачи. Метод наименьших квадратов. Линейная аппроксимация. Логарифмическая аппроксимация. Экспоненциальная аппроксимация. Степенная аппроксимация. Интерполяция. Постановка задачи. Локальная и глобальная интерполяция. Интерполяционный многочлен Лагранжа. Интерполяционный многочлен Ньютона. Экстраполяция. Временные ряды. Компоненты временных рядов. Объединение компонентов временного ряда. Оценка тренда. Виды функциональных зависимостей. Выделение тренда. Метод скользящего среднего. Метод экспоненциального сглаживания. Прогнозирование. Двойное экспоненциальное сглаживание. Метод Хольт\u00ADВинтерса. Качество прогнозирования. Корреляционный анализ. Регрессия и регрессионный анализ. Линейная регрессия. Нелинейная регрессия. Регрессионнный анализ. Что такое нейронная сеть (НС)? Хронология. Классификация НС. Этапы решения задачи. Области применения НС. Структура нейрона. Синапс. Принципы работы НС. Функция активации. Обучение, валидация, тестирование. Итерация. Эпоха. Ошибка. Нейрон смещения. Обучение НС. Градиентный спуск. Метод обратного распространения (МОР). Гиперпараметры. Cходимость. Переобучение. Нейронные сети. Сверточные нейронные сети (СНС). Архитектура СНС. Слой свертки. Слой активации. Пулинг или субдискретизирующий слой. Полносвязная НС. Обучение СНС. Преимущества СНС. Недостатки СНС. Сверточные нейронные сети. Цифровые процессоры обработки сигналов (ЦПОС). Графические процессоры (GPU). Программируемые логические интегральные схемы (ПЛИС). Технология CUDA.Системы на кристалле (SoC). Языки математических и научных расчетов: MATLAB, Python, R.",
		"text_proj": "Роботизированная система машинного творчества ARTCYBE. Комплексный проект в области робототехники и искусственного интеллекта.  Исследования в области компьютерного творчества (Computer Creativity). Генерация художественных изображений с помощью GAN-сетей по введенным растровым, свободная генерация изображений в заданном художественном стиле, переход от растровых изображений к векторным картам. Исследования в области машинного зрения. Разработка системы обратной связи для робота-живописца. Разработка конструкции художественных роботов различной архитектуры. Проведение художественного теста Тьюринга в формате выставки картин. Базовые знания программирования на MATLAB, коммуникабельность, высокая социализация. Знать основы аналоговой и цифровой схемотехники, методы обработки изображений, навыки слесарной работы, монтажа. Навыки работы с генеративными нейронными сетями, знания в области современной робототехники и аддитивных технологий, знания в области алгоритмов цифровой обработки изображений, опыт проектирования аддитивных установок.",
		"need_match": true
	},
	{
		"id_rp": "1009",
		"id_proj": "4",
		"name_rp": "РАЗРАБОТКА ПРИЛОЖЕНИЙ В РАСПРЕДЕЛЕННОЙ СРЕДЕ",
		"name_proj": "Разработка модулей обработки данных для библиотеки алгоритмов федеративного обучения FL4J ",
        "text_rp": "Дисциплина посвящена изучению основных принципов распределённых систем. В теоретической части курса рассматриваются вопросы о взаимодействии и синхронизации процессов, достижении непротиворечивости реплицируемых данных, обеспечении отказоустойчивости в распределенных системах. В процессе освоения дисциплины формируются практические навыки разработки распределенных приложений на объектно-ориентированном языке программирования Java с использованием различных моделей взаимодействия процессов. . Целью дисциплины является изучение принципов распределённых систем и формирование практических навыков разработки распределенных приложений с использованием различных моделей взаимодействия процессов. Получение теоретических знаний в области взаимодействия и синхронизации процессов, достижения непротиворечивости реплицируемых данных, обеспечения отказоустойчивости в распределенных системах. Формирование практических навыков разработки распределенных приложений на объектно-ориентированном языке программирования Java. Освоение подходов к построению архитектуры распределенного приложения. Знания принципов построения распределенных систем; методов и инструментальных средств систем искусственного интеллекта, критериев их выбора и методов комплексирования; основных критериев эффективности и качества функционирования системы искусственного интеллекта; методов, языков и программных средств разработки программных компонентов систем искусственного интеллекта. Умения разрабатывать распределенные приложения; выбирать, применять и интегрировать методы и инструментальные средства систем искусственного интеллекта, критерии их выбора и методы комплексирования; выбирать, адаптировать, разрабатывать и интегрировать программные компоненты систем искусственного интеллекта с учетом основных критериев эффективности и качества функционирования. Навыки использования интегрированной среды разработки в процессе создания распределенных приложений.. Введение. Предмет дисциплины и ее задачи. Историческая справка о развитии распределенных систем. Значение развития этого направления для искусственного интеллекта. Структура содержания дисциплины. Характеристика литературных источников. Модели взаимодействия процессов в распределенных системах. Потоки и процессы. Модели взаимодействия процессов - удаленное обращение к методам, системы очередей сообщений. Примеры использования удаленного обращения к методам на практике. Типы процессов в распределенных системах. Внутренняя организация процессов. Многопоточные технологии. Модель клиент-сервер и ее организация. Варианты миграции программ и процессов с машины на машину. Способы использования имен в распределенных системах. Имя и сущность. Организация доступа к сущности. Пространства имен. Разрешение имени. Реализация системы именования. Серверы имен. Примеры существующих реализаций пространств имен. Мобильные сущности. Подходы к их локализации. Организация имен. Взаимодействие сущностей именования и локализации. Механизмы автоматического удаления сущностей. Синхронизация процессов в распределенных системах. Синхронизация на основе реального времени. Синхронизация с одним относительным параметром упорядочивания. Определение распределенного глобального состояния и его запись в процессе синхронизации. Алгоритмы голосования. Распределенные взаимные исключения. Распределенные транзакции, их классификация и реализация. Реплицируемые данные в распределенных системах. Понятие репликации данных. Реплицируемые объекты. Непротиворечивость реплицируемых данных. Способы достижения непротиворечивости данных в распределенных системах. Модели непротиворечивости данных в распределенных системах с разделяемой памятью. Реализации моделей непротиворечивости - распространение обновлений и поддержание непротиворечивости реплик. Заключение. Основные направления дальнейшего развития и практического использования распределенных систем и технологий в искусственном интеллекте. ",
		"text_proj": "Разработка модулей обработки данных для библиотеки алгоритмов федеративного обучения FL4J.   Разработка фреймворка для алгоритмов федеративного обучения предназначенных для выполнения анализа данных (машинного обучения) на распределенных источниках данных без их передачи в центр обработки.  Технология предложена  в 2017 году Google Inc и предназначена для обучения на Больших данных в условиях когда данные не могут передаваться в облако по причине плохой связи или приватности данных. В настоящее время технология активно развивается и появляется множество библиотек на языке Python (FATE, PaddleFL, TensorFlow Federate и др.).     Разработанная в СПбГЭТУ \"ЛЭТИ\" библиотека FL4J (Federated Learning for Java) написана на языке Java. Она позволяет как реализовать алгоритмы машинного обучения для выполнения в федеративном режиме, так и подключать другие библиотеки, например, библиотеку DL4J для алгоритмов глубокого обучения.  В данном проекте требуется разработка: разработка модулей для чтения данных разных форматов; доработка модулей обработки данных (нормализации, пропущенных значений и т.п.); модулей преобразования наборов данных.  . Обязательно должен: знать: принципы ООП, язык программирования Java уметь: программировать на Java. Желательно должен: знать: работу с файлами и БД уметь: работать с файлами разных форматов Excel, Json и др. опыт: использования Unit тестов (JUnit). В результате получит: знания: работу с файлами и БД, методы преобразования и обработки данных умения: обрабатывать данные для машинного обучения опыт: программирование на языке Java, использования Unit тестов (JUnit). Резюме о навыках. Требуется написать кратко что Вы умеете и чем хотели бы заниматься (работа с изображениями, БД, иные форматы данных, улучшение производительности доступа к данным и др).",
		"need_match": true
	},
	{
		"id_rp": "1011",
		"id_proj": "14",
		"name_rp": "Тестирование и сопровождение программного обеспечения",
		"name_proj": "Тестирование и документирование стенда виртуальных рабочих мест (VDI) под российским ПО виртуализации",
		"text_rp": "Цели дисциплины охватывают ряд направлений, связанных с планированием тестирования, выявления рисков продукта и проекта, составления критериев входа в тестирование и выхода, управления инцидентами, разработку тестов, выбор методов тестирования, осуществление тестирования, составление итоговой отчетности по тестированию. . Цель учебной дисциплины заключается в усовершенствовании техники логического тестирования и отладки программ, а также применении полученных навыков в тестировании и отладке программ, формирование у студентов профессиональных компетенций, связанных с использованием теоретических знаний и практических навыков в области обеспечения качества программного обеспечения. Задачи дисциплины: 1). Изучение основных процессов и видов тестирования, моделей разработки ПО, процессов сопровождения ПО, получение знаний о методах управления процессом сопровождения, методах организации работы при решении задач сопровождения ПО. 2). Формирование умений планировать тестирование, выявлять риски продукта и проекта, составлять критерии входа в тестирование и выхода, управлять инцидентами, разрабатывать тесты, выбирать методы тестирования, осуществлять тестирование, составлять итоговую отчетность по тестированию, формулировать требования к уровням сопровождения ПО, использовать международные и отечественные стандарты в области сопровождения ПО, использовать нормативные правовые документы при сопровождении ПО. 3). Освоение навыков разработки тестов (эквивалентное разбиение, анализ граничных значений, тестирование таблицы решений, тестирование таблицы переходов, тестирование по сценариям использования), интегрированной средой разработки и различными инструментами тестирования и планирования тестирования. Знания: - об основных методах и средствах эффективного анализа функционирования программного обеспечения; - об основных видах работ на этапе сопровождения программного обеспечения; - об основных принципах контроля конфигурации и поддержки целостности конфигурации программного обеспечения; - о средствах защиты программного обеспечения в компьютерных системах. Умение: - подбирать и настраивать конфигурацию программного обеспечения компьютерных систем; - использовать методы защиты программного обеспечения компьютерных систем; - проводить инсталляцию программного обеспечения компьютерных систем; - производить настройку отдельных компонентов программного обеспечения компьютерных систем; - анализировать риски и характеристики качества программного обеспечения. Навыки: - настройки отдельных компонентов программного обеспечения компьютерных систем; - выполнения отдельных видов работ на этапе поддержки программного обеспечения компьютерной системы.. Введение. Место тестирования в жизненном цикле разработки программного обеспечения. Основные понятия дисциплины. Роль тестирования в разработке программного обеспечения, сопровождении и функционировании программного обеспечения. Планирование и управление тестированием. Анализ и проектирование тестов. Природа сопровождения. Потребность в сопровождении. Приоритет стоимости сопровождения. Категории сопровождения. Тестирование в модели ЖЦ. Уровни и Типы тестирования. Альфа тестирование, бета тестирование, компонентное тестирование. Итерационное тестирование. Системное тестирование. Приемочное тестирование. Тестирование методом черного ящика, покрытие кода, функциональное тестирование, тестирование взаимодействия, нагрузочное тестирование, тестирование восстановления, тестирование производительности. Тестирование переносимости, тестирование надежности, тестирование безопасности, стресс-тестирование, структурное тестирование, тестирование удобства использования, тестирование методом белого ящика. Анализ влияния, тестирование в период сопровождении. Формальное и неформальное рецензирование. Критерий входа, инспекция, метрика, модератор, равноправный анализ, эксперт, секретарь, технический анализ, сквозной контроль. Действия (шаги) формального рецензирования. Роли и обязанности. Типы рецензирований. Факторы успешного проведения. Компилятор, коэффициент сложности, поток управления, поток данных, статистический анализ. IEEE 1028] IEEE Std 1028 (2008) IEEE Standard for Software Reviews and Audits. Методы проектирования тестов. Жизненный цикл дефекта. Типы дефектов на разных фазах тестирования. Управление дефектами. Баг-трэкинговые системы. Тест-кейсы. Спецификация тестовых сценариев, проектирование теста, расписание выполнения тестов, спецификация процедуры тестирования, автоматизированный сценарий тестирования, трассируемость. Разработка тестов методом черного ящика, разработка тестов методом белого ящика, метод создания тестов на основе опыта, метод разработки тестов на основе спецификации, структурный метод разработки тестов. Анализ граничных значений, тестирование таблицы решений. Эквивалентное разбиение, тестирование таблицы переходов, тестирование по сценариям использования. Покрытие кода, покрытие альтернатив, покрытие операторов, тестирование на основе структуры. Исследовательское тестирование, атака (на недочеты). Выбор методов тестирования. Управление тестированием. Тестировщик, руководитель тестирования, менеджер тестирования. Организация и независимость тестирования. Подход к тестированию, стратегия тестирования. Планирование тестирования. Управление конфигурацией. Управление версиями. Риски продукта, риски проекта, ориентированное на риски тестирование. Инструмент покрытия, инструмент отладки, инструмент динамического анализа, инструмент управления инцидентами, инструмент нагрузочного тестирования, инструмент моделирования, инструмент мониторинга, инструмент тестирования производительности, эффект зондирования, инструмент управления требованиями, инструмент рецензирования, средство защиты, инструмент статистического анализа, инструмент стрессового тестирования, тестовый компанатор, инструмент подготовки тестовых данных, инструмент проектирования тестов, тестовая обвязка, инструмент выполнения тестов, инструмент управления тестированием, инструмент интегрированной среды модульного тестирования. Ключевые вопросы сопровождения программного обеспечения. Технические вопросы. Управленческие вопросы. Оценка стоимости сопровождения. Измерения в сопровождении программного обеспечения. Процессы сопровождения. Работы по сопровождению. Техники сопровождения. Реинжиниринг. Обратный инжиниринг. Введение в ITIL. Что такое ITIL, другие существующие методологии. Управление ИТ-сервисами (IT Service Management). Жизненный цикл сервиса. Ролевая модель, понятие Роли. RACI-модель. Стратегия сервиса и проектирование сервиса. Ценность управления услугами. Понятия и определения. Формирование стратегии. Оценка рисков. Управление финансами. Управление спросом. Принцип 4Р. 5 составляющих сервисного дизайна. Управление уровнем услуг. Управление каталогом услуг. Управление мощностями. Управление доступностью. Управление непрерывностью. Управление информационной безопасностью. Управление поставщиками. Преобразование сервиса и Эксплуатация сервиса. Достижение баланса. Управление инцидентами. Управление событиями. Управление запросами. Управление проблемами. Управление доступом. Функции. Сервис Деск (Service Desk). Service Desk: Роль. Service Desk: Организационная структура. Service Desk: Критерии построения. Service Desk: Возможные проблемы внедрения. Service Desk: Метрики. Техническое управление. Управление операционной деятельностью ИТ. Управление приложениями. Постоянное улучшение сервисов. Заключение. Цели CSI. Роль постоянного улучшения сервисов. Модель PDCA. Метрики. 7-ми ступенчатый процесс улучшения сервиса. Развитие задач тестирования и сопровождения ПО.",
		"text_proj": "Тестирование и документирование стенда виртуальных рабочих мест (VDI) под российским ПО виртуализации. Тестирование стенда VDI под российским ПО виртуализации, разработка технической документации по результатам тестирования. Обязательно должен: знать:. уметь:. владеть:. Желательно должен: знать:. уметь:. владеть:. В результате получит: знания: Современных аппаратных и программных средств виртуализации, знание ГОСТ. умения: Использования современных программных средств виртуализации. опыт: Тестирования и разработки технической документации.",
		"need_match": true
	},
	{
		"id_rp": "1016",
		"id_proj": "46",
		"name_rp": "Интеллектуальные системы",
		"name_proj": "Разработка интеллектуальных модулей обработки данных на FPGA",
		"text_rp": "Рассматриваются основные понятия теории интеллектуальных систем; средства языка логического программирования для разработки интеллектуальных систем: рекурсивные программы, решение логических задач с использованием структур данных – списков и деревьев; интерактивная визуальная среда логического программирования Visual Prolog; основы построения и использования экспертных систем; методы планирования действий в интеллектуальных системах; теоретические и практические основы организации обучения в интеллектуальных системах; методы поиска в условиях противодействия. Лабораторные работы ориентированы на изучение языка логического программирования в среде Visual Prolog, программирование с использованием структур данных списки и деревья, разработку экспертной системы на языке логического программирования, исследование моделей планирования в интеллектуальных системах.. Изучение теоретических основ, методов и средств построения интеллектуальных систем на основе знания мировых тенденций развития вычислительной техники и информационных технологий и приобретение навыков построения интеллектуальных систем. Формирование представления о перспективах развития интеллектуальных систем как инновационной области информационных технологий, о парадигме логического программирования и ее применении при разработке интеллектуальных и экспертных систем. Понятие об интеллектуальных системах, как системах, основанных на знаниях, об особенностях знаний как формы представления информации, методов решения задач планирования и обучения в интеллектуальных системах. Студент должен показать умение анализировать профессиональную информацию, выделять в ней главное, структурировать, оформлять и программировать в рамках декларативной парадигмы, способен разрабатывать алгоритмы и программные средства для решения задач в области создания и применения искусственного интеллекта. Освоение способов формализации интеллектуальных задач с помощью языков искусственного интеллекта, практических навыков логического и продукционного программирования, выбор, разработка и проведение экспериментальной проверки работоспособности программных компонентов систем искусственного интеллекта по обеспечению требуемых критериев эффективности и качества функционирования.. Контрольная работа № 1 по темам 1-8 1.       В чем состоит основное отличие знаний от данных? 1)    В структурности данных и активности знаний. 2)    В структурности и активности знаний. 3)    В структурности или активности знаний. 4)    В активности данных и структурности знаний. 2.       На какие типы условно может быть разделено знание, которое одно человеческое поколение передает другому (в теории интеллектуальных систем)? 1)    На общедоступные (факты и теории) и  индивидуальные (эвристики). 2)    На актуальные, неактуальные и фоновые. 3)    На первичные и вторичные. 3.       Что такое внутренняя интерпретируемость знаний (или данных)? 1)    Наличие системы имен информационной единицы знаний (или данных). 2)    Возможность интерпретации знаний или данных изнутри БД или БЗ. 3)    Сопоставление знаний или данных с функциями, позволяющими их интерпретировать. 4.       Что такое структурированность знаний? 1)    Наличие у знаний внутренней структуры. 2)    Свойство знаний, выражаемое связями типа «род-вид», «часть-целое». 3)    Способность знаний к самоорганизации на уровне структуры. 5.       Что такое парадигма программирования? 1)    Подход к программированию, содержащий описание инструментальных средств. 2)    Правила эффективного программирования и отладки программ. 3)    Набор идей и рекомендаций, определяющих стиль написания программ. 6.       Назовите 2 способа интерпретации правила Пролога. 1)    Выполнение действия и формулирование условия. 2)    Логическое высказывание и вызов процедуры. 3)    Вычисление функции и определение отношений между термами. 7.       Какое выражение допустимо на языке Пролог для увеличения значения переменной на константу 5? 1)    Y=X+5 2)    X=X+5 3)    X+5 4)    +5Х 8.       Почему правило Modus Ponens можно рассматривать как частный случай правила резолюций (экземпляр резолюции)? 1)    Потому, что при замене формулы A ð B на A Ù ØB в правиле Modus Ponens оно становится экземпляром резолюции. 2)    Потому, что при замене формулы A ð B на ØA Ù B в правиле Modus Ponens оно становится экземпляром резолюции. 3)    Потому, что при замене формулы A ð B на A Ú ØB в правиле Modus Ponens оно становится экземпляром резолюции. 4)    Потому, что при замене формулы A ð B на ØA Ú B в правиле Modus Ponens оно становится экземпляром резолюции. 9.       Какое определение операции редукции является правильным? 1)    Операция,  связанная с заменой цели G заголовком того примера правила,  из программы P , тело которого совпадает с данной целью. 2)    Операция,  связанная с заменой цели G телом того примера правила,  из программы P , заголовок которого совпадает с данной целью. 3)    Операция,  связанная с заменой цели G телом того правила,  из программы P , заголовок которого совпадает с данной целью. 4)    Операция,  связанная с заменой цели G телом того примера правила,  из программы P , тело которого совпадает с данной целью. 10. Цель G следует из программы P тогда и только тогда, когда: 1)    в P найдется правило с основным примером A :- B1,  B2 ,.,  Bn , где n > 0, таким, что B1 , B2 ,., Bn являются логическими следствиями P и A является примером G. 2)    G может быть выведена из P с помощью конечного числа применений обобщенного правила modus ponens. 3)    G может быть выведена из P с помощью конечного числа применений правила де-Моргана. 11. Что называется стандартной стратегией выбора цели в процессе редукции? 1)    Правило выбора, согласно  которому  в качестве очередной цели берется всегда самая правая цель резольвенты. 2)    Правило выбора, согласно  которому  в качестве очередной цели берется произвольная цель резольвенты. 3)    Правило выбора, согласно  которому  в качестве очередной цели берется всегда самая левая цель резольвенты. 12. Что называется стандартной стратегией поиска в процессе редукции? 1)    Поиск в программе P правила Ci , функтор в заголовке которого совпадает с функтором цели Gi, в порядке, обратном написанию правил в программе. 2)    Поиск в программе P правила Ci , функтор в заголовке которого совпадает с функтором цели Gi, в порядке написания правил в программе. 3)    Поиск в программе P правила Ci , функтор в заголовке которого совпадает с функтором цели Gi, в произвольном порядке. 13. Что позволяет остановить рекурсивный процесс? 1)    Указание копии задачи, не допускающей дальнейшее выделение подзадач. 2)    Граничное условие. 3)    Указание копии задачи, допускающей дальнейшее выделение подзадач. 4)    Граничное условие копии подзадачи. 14.  Как работает управление механизмом возврата в Прологе с использованием специальной цели, обозначаемой символом “!”? 1)     Доказательство этой цели заканчивается неуспешно, после чего отключается механизм возврата и все цели, расположенные в тексте правила до цели-отсечения (включая и головную цель правила) не доказываются повторно. 2)     Доказательство этой цели заканчивается успешно, после чего отключается механизм возврата и все цели, расположенные в тексте правила до цели-отсечения (включая и головную цель правила) не доказываются повторно. 3)    Доказательство этой цели заканчивается успешно, после чего отключается механизм возврата и все цели, расположенные в тексте правила после цели-отсечения (включая и головную цель правила) не доказываются повторно. 4)    Доказательство этой цели заканчивается успешно, после чего отключается механизм возврата и все цели, расположенные в тексте правила до цели-отсечения не доказываются повторно. 15.  Выбрать правильные реализации отношения отрицания not произвольной цели на языке Пролог: 1)    not(X) :– fail, !, X.      not(X). 2)    not(X) :– !, Х, fail.      not(X). 3)    not(X) :– X, !, fail.      not(X). 4)    not(X) :– X, fail, !.      not(X). 16. Почему рекурсия, используемая при работе с бинарными деревьями на Прологе, не является хвостовой? 1)    Рекурсивный вызов находится в головной части правила вывода. 2)    Рекурсивный вызов не является только последней целью в хвостовой части правила вывода. 3)    Приходится обрабатывать левое и правое поддеревья, что дает две рекурсивные цели в одном предложении. 17.  В каких случаях применяется прямая стратегия логического вывода при реализации на языке Пролог экспертной системы?. Министерство науки и высшего образования Российской Федерации ФГАОУ ВО «Санкт-Петербургский государственный электротехнический университет «ЛЭТИ» имени В.И. Ульянова (Ленина)» ____________________________________________________________ ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 1 Дисциплина Интеллектуальные системы ,  кафедра Вычислительной техники 1. Интеллектуальные системы – системы, основанные на знаниях.  2. Приложения Пролога – экспертные системы. Архитектура экспертных систем. 3. Задача. УТВЕРЖДАЮ Заведующий кафедрой                                                   М.С. Куприянов. Введение. Интеллектуальные системы – основные понятия. Предмет дисциплины, её объём, содержание. Обзор литературы по курсу. Интеллектуальные системы – системы, основанные на знаниях. Место интеллектуальных систем на множестве компьютерных систем. Особенности знаний как формы представления информации. Два типа знаний. Проблема представления знаний. Язык логического программирования как средство разработки интеллектуальных систем. Логические модели и логическое программирование. Разработка интеллектуальных и экспертных систем на языке логического программирования. Язык логического программирования Пролог. Интерактивная визуальная среда программирования Visual Prolog. Рекурсивные программы. Решение логических задач с использованием списков. Решение логических задач с использованием структур данных типа «дерево». Приложения языка Пролог. Экспертные системы. Решение задачи планирования действий в интеллектуальных системах. Задача планирования. Язык описания состояний и действий. Планирование на основе поиска в пространстве состояний. Планирование с помощью пропозициональной логики. Планирование действий в реальном мире. Решение задачи обучения в интеллектуальных системах. Формы обучения. Обучение на основе наблюдений. Индуктивное обучение. Построение деревьев решений. Обучение с использованием знаний. Логическая формулировка задачи обучения. Статистические методы обучения. Обучение с полными данными. Метод максимального правдоподобия. Пассивное и активное обучение с подкреплением. Поиск в условиях противодействия. Заключение. Альфа-бета-отсечение. Архитектура доски объявлений. Перспективы развития интеллектуальных систем как инновационной области информационных технологий.",
		"text_proj": "Разработка интеллектуальных модулей обработки данных на FPGA. Цель проекта – разработка интеллектуальных технологий обработки данных для встроенных систем.  Для достижения цели исследования необходимо решить следующие задачи: 1. Разработка новых моделей и методов и снижения размерности данных, коррекции систем без переобучения.  2. Разработка интеллектуальных методов и алгоритмов обработки данных в режиме реального времени. 3. Аппаратная реализация встроенных систем. Партнёры: Huawei, Siemens. . Обязательно должен: знать: основы программирования. уметь: работать с \"железом\". владеть: одним из языков высокого уровня. Желательно должен: знать: основы проектирования на FPGA. уметь: моделировать на Matlab или Python; владеть: языками VHDL или Verilog. . В результате получит: знания: в области архитектуры встроенных систем; умения: проектирования для FPGA; опыт: проектирования и реализации аппаратно-ориентированных интеллектуальных модулей обработки данных.",
		"need_match": true
	},
	{
		"id_rp": "105",
		"id_proj": "41",
		"name_rp": "Системы управления манипуляторными роботами",
		"name_proj": "Разработка подводного телеуправляемого робота на гусеничном шасси.",
        "text_rp": "Дисциплина включает изложение основ теории манипуляционных роботов и методов управления ими. Рассматриваются основные сведения о динамике манипуляционных механизмов, математические модели движения и методика их анализа. Подробно рассматриваются способы и алгоритмы кинематического управления манипуляторами. Дисциплина поддерживается большим числом практических и лабораторных занятий, а также самостоятельной работой студентов по основным разделам программы. . Изучение основ теории манипуляционных роботов и методов управления ими. Овладение: знаниями об основных кинематических соотношениях; умениями формулировать прямую и обратную задачи позиционные задачи и прямую и обратную задачи о скорости звеньев манипулятора; навыками построения алгоритма управления манипулятором. Формирование общего представления о динамике манипуляционных механизмов, математических моделях движения и методиках их анализа. Овладение: знаниями о показателях динамических свойств манипулятора; умениями составлять алгоритм вычисления сил и моментов реакции звеньев манипулятора; навыками составления дифференциальных уравнений движения манипулятора относительно обобщенных координат. Освоение навыков практических методов исследования и расчетов исполнительной системы манипуляционного робота. Овладение: знаниями о средствах автоматизированного синтеза мехатронных систем; умениями разрабатывать системы управления для мехатронных и роботизированных технологических комплексов; навыками моделирования мехатронных и роботизированных технологических комплексов.. Примерные вопросы к коллоквиуму: 1. Запишите уравнение статического равновесия трехзвенного манипулятора, содержащего только поступательные кинематические пары 2. Запишите уравнение статического равновесия трехзвенного манипулятора, содержащего только поступательные пары вращения 3. Запишите уравнение статического равновесия для шестизвенного манипулятора типа PUMA-560, у которого первые три пары вращательные , а три последующие – поступательные. 4. Напишите соотношение, определяющее силу реакции и момент реакции опоры манипулятора имеющего три вращательные пары. 5. Объясните, почему для вычисления сил и моментов, действующих на звенья манипулятора, целесообразно применять метод обратной рекурсии. 6. Составьте алгоритм вычисления сил и моментов реакции звеньев манипулятора, имеющего плоскую трехзвенную конструкцию с вращательными парами, если заданы значения обобщенных координат. 7. Составьте алгоритм вычисления эллипсов развиваемых сил для плоского двухзвенного манипулятора. 8. Поясните, для решения каких практических задач можно использовать эллипсоиды развиваемых манипулятором сил. 9. Что характеризуют главные оси эллипсоида сил: их величины или направления? 10. Сформулируйте первую и вторую задачи динамики применительно к манипуляционному механизму. . Введение. Предмет дисциплины и ее задачи. Структура и содержание дисциплины, ее связь с другими дисциплинами учебного плана. Тема 1. Основные кинематические соотношения. Манипулятор как механическая система. Преобразования координат, однородные координаты и преобразования. Определение положения и ориентации звеньев манипулятора, специальные системы координат. Тема 2. Положение манипулятора в рабочем пространстве. Прямая и обратная позиционные задачи. Геометрия рабочего пространства манипулятора. Тема 3. Скорости и ускорения звенев манипулятора. Вращение твердого тела. Скорости и ускорения звенев манипулятора. Прямая и обратная задача о скорости. Кинематические свойства манипуляторов. Тема 4. Кинематическое управление манипулятором. Планирование траекторий в пространстве обобщенных координат. Управление манипулятором в пространстве координат схвата. Тема 5. Уравнение кинетостатики манипулятора. Статика манипуляционных механизмов. Анализ рабочих сил и моментов. Показатели динамических свойств манипулятора. Тема 6. Система управления исполнительного уровня. Математическая модель исполнительной системы, исследование линеаризованной модели. Автоматизированный синтез исполнительной системы. Тема 7. Методы динамического управления манипуляторами. Методы, основанные на решении обратных задач динамики. Декомпозиция управления, силовая обратная связь и динамическое планирование. Тема 8. Логическое управление сложной робототехнической системой. Понятие сложной системы, построение моделей подсистем, сетевой автомат, сеть автоматов. Метод управления сложной робототехнической системой. Заключение. Перспективы развития мехатронных и робототехнических систем.",
		"text_proj": "Разработка подводного телеуправляемого робота на гусеничном шасси. Разработка программного и аппаратного обеспечения подводной роботизированной системы на основе гусеничной платформы с манипулятором. Создание телеуправляемого водонепроницаемого шасси. Разработка сенсорной системы робота. Разработка подсистемы управления шасси и манипулятором. Полевые испытания робота на водоеме. Основы Arduino IDE, коммуникабельность, владение английским языком на уровне Basic, общая техническая грамотность. Знание цифровой и аналоговой схемотехники, выносливость, целеустремленность. Знания в области дизайна подводных роботизированных систем. Практические навыки проектирования комплексных объектов робототехники. Опыт разработки программно-аппаратных комплексов общего назначения Незабываемый опыт полевой экспедиции на водоемы нашей необъятной Родины с погружениями за застрявшим роботом.",
		"need_match": true
	},
	{
		"id_rp": "1040",
		"id_proj": "26",
		"name_rp": "Управление и информатика в технических системах",
		"name_proj": "Программно-аппаратное конфигурирование сети лаборатории.",
		"text_rp": "В рамках данной дисциплины рассматриваются основные положения общей теории систем, технологий и методов проектирования программных систем, изучаются особенности современных методов и средств проектирования информационных систем, основанных на использовании CASE­технологий. История и тенденции развития технологий программирования. Проблемы разработки сложных программных систем. Основные понятия общей теории систем. Жизненный цикл и этапы разработки программного обеспечения. Оценка качества процессов создания программного обеспечения. Приемы обеспечения технологичности программных продуктов. Определение требований к программному обеспечению и исходных данных для его проектирования. Проектирование программного обеспечения. Тестирование, верификация и отладка программных систем. Составление программной документации.",
		"text_proj": "Программно-аппаратное конфигурирование сети лаборатории. Видео-презентация проекта https://youtu.be/uLePbMkxzZE Цель данного проекта состоит в построении и отладке программно-аппаратной системы наблюдения и отладки решений на полигоне автономного транспорта лаборатории мобильных интеллектуальных систем.  Задачи: Настройка системы управления конфигурациями Ansible на парке машин лаборатории интеллектуальных мобильных систем Разработка решения захвата видео камеры наблюдения полигона в трансляцию конференций Zoom Тестирование онлайн-курса по GDB и Valgrind Формат работы: смешанный: заочный + очный Очно в аудитории 3501 Прототипирование при отсутствии необходимости работы с оборудованием возможно выполнять дистанционно. Ориентировочно 2-3 курс Навык работы с ОС Linux (Ubuntu) Знание языка Си, основ отладки программ Умение самостоятельно находить информацию, учиться новому Умение следовать инструкции Аккуратность  Умение пользоваться отверткой Знание английского языка на уровне чтения технической документации Понимание базовых принципов организации ЛВС. Плюсом будет любой опыт работы с библиотеками автоматизации настройки и любой опыт наладки систем видеофиксации. . В результате получит: знания о устройстве систем машинного зрения и систем автоматизированной постановки эксперимента для задач автономного транспорта, умения настройки и отладки реальных роботехнических систем, опыт участия в передовом исследовательском проекте. . Тестовое задание проекта. Составить docker-compose файл, позволяющий запустить 2 докер-контейнера, объединенные в одну локальную сеть (изолированную от сети хост-машины)   Программа-клиент, запущенная в одном контейнере должна передавать строку “docker test #K” по TCP программе-серверу, запущенной во втором контейнере. Программа-сервер должна печатать полученные данные в лог, доступный командой docker log.   #K - порядковый номер сообщения (0, 1, 2, …) Строку передавать раз в секунду   Способ реализации программ клиента и сервера может быть любым (стандартные утилиты / самостоятельно написанные программы / …)   В качестве решения прислать ссылку на репозиторий с docker-compose файлом и инструкцией по запуску.",
		"need_match": true
	},
	{
		"id_rp": "1278",
		"id_proj": "9",
		"name_rp": "Тестирование программного обеспечения",
		"name_proj": "Тестирование конфигураций на платформах: Supermicro c AMD+Astra Linux+МДЗ (модуль доверенной загрузки) Соболь; Supermicro/Intel + видеокарта AMD (в разных режимах) +Astra Linux+МДЗ Cоболь",
		"text_rp": "Дисциплина посвящена изучению теоретических основ и методов тестирования программного обеспечения. Рассматриваются основные понятия процесса тестирования, уровни тестирования, виды и методы тестирования. Определяются критерии завершения процесса тестирования. Особое внимание уделяется вопросам документирования процесса тестирования. Рассматриваются инструментальные средства тестирования.. Изучение: основных понятий, связанных с функциональным и нефункциональным тестированием программного обеспечения, получение базовых знаний дисциплины;– возможностей использования в решении практических задач методов тестирования «чёрного ящика» и знание границы их применения. Формирование: умения применять базовые методы нефункционального тестирования. Изучение: основных понятий, связанных с функциональным и нефункциональным тестированием программного обеспечения, получение базовых знаний дисциплины;– возможностей использования в решении практических задач методов тестирования «чёрного ящика» и знание границы их применения. Формирование: умения применять базовые методы нефункционального тестирования. Освоение: навыков применения методик тестирования «чёрного ящика», написания тестов и тестовых сценариев, составления отчетов об ошибках, применения средств автоматизации тестирования.. Перечень примерных вопросов для коллоквиумов: 1. Каковы наиболее распространенные техники тестирования «черного ящика»? (Классы эквивалентности, граничные значения, диаграмма переходов и состояний; краткое описание каждой техники). 2. Назовите несколько видов тестирования под нагрузкой. (Тестирование производительности, стрессовое тестирование, тестирование выносливости, тестирование восстановления и т.д. с кратким описанием каждого вида) 3. В любом ли процессе применима автоматизация? (Нет, в ней нет смысла при коротком релизном цикле) 4. Какие артефакты тестирования вы можете назвать? (Тест-кейс, тест-план, отчет об ошибке, тест-скрипт, отчет о выполнении тестов). . Введение. Краткая характеристика дисциплины, ее цели, задачи, объем, содержание, порядок изучения материала, связь с другими дисциплинами учебного плана и место в подготовке специалистов по указанным направлениям и специальностям. Формы контроля самостоятельной работы. Характеристика учебной литературы. Тема 1. Основные понятия тестирования. Термины, описывающие нарушение функционирования программных систем. Ключевые вопросы тестирования программного обеспечения: критерии отбора/адекватности тестов, критерии завершения тестирования, цели тестирования, эффективность тестирования. Связь тестирования с другими видами деятельности по разработке программного обеспечения. Документирование тестирования. Тема 2. Функциональное тестирование. Функциональное тестирование (метод «черного ящика»). Метод эквивалентного разбиения. Анализ граничных значений. Метод диаграмм переходов и состояний.Теоретические и практические ограничения тестирования. Тема 3. Тестирование под нагрузкой. Тестирование производительности: нагрузочное тестирование, стресс-тестирование, тестирование стабильности. Практические проблемы нагрузочного тестирования. Тема 4. Тестирование безопасности. Теоретические основы тестирования безопасности. Риски. Распространенные уязвимости и методы их обнаружения. Тема 5. Тестирование удобства использования. Определение, экспертная оценка удобства использования программных систем. Методы тестирования используемости программных систем, применяемые группой тестирования проекта – общие и частные типовые методики, тестирование на основе пользовательских вариантов использования. Методы тестирования используемости программных систем с привлечением сторонних пользователей (метод теневого наблюдения, метод вопросов и ответов, метод активного вмешательства). Тема 6. Уровни тестирования. Место тестирования в процессе разработки. Модульное и интеграционное тестирование. Отличительные особенности модульных тестов. Метрики покрытия/глубины тестирования. Введение искусственных дефектов. Тема 7. Инструментальные средства тестирования. Сущность и преимущества автоматизации тестирования. Зависимость успеха автоматизации от степени зрелости процесса тестирования. Проблемы разработки и поддержки набора автоматизированных функциональных тестов и методики их разработки. Формирование результатов тестового прогона и анализ результатов. Автоматизированная генерация входных тестовых данных. Тема 8. Организация процесса тестирования. Процесс тестирования как деятельность по обеспечению качества программного продукта. Состав команды тестирования. Внутренние и независимые команды тестирования. Управление процессом тестирования. Критерии отбора тестов. Разработка тестового окружения. Выполнение тестов. Анализ результатов тестирования. Отслеживание дефектов. Заключение. Основные тенденции развития и совершенствования методов тестирования.",
		"text_proj": "Тестирование конфигураций на платформах: Supermicro c AMD+Astra Linux+МДЗ (модуль доверенной загрузки) Соболь; Supermicro/Intel + видеокарта AMD (в разных режимах) +Astra Linux+МДЗ Cоболь. Необходимо:  разработать стандарты сборки исследуемого компьютерного оборудования; тестирование различных конфигураций компьютерного оборудования; определение рекомендуемых назначений (например, в режиме вывода видео конфигурация оборудования работает с таким-то разрешением, в режиме сопроцессора поддерживает такие-то функции, важные для разработчиков ПО под Astra Linux и др.), документирование. Обязательно должен: знать:. уметь:. владеть:. Желательно должен: знать:. уметь:. владеть:. В результате получит: знания: Технические характеристики современных серверов и АРМ, знание ГОСТ и др. умения: Cборки и тестирования современного компьютерного оборудования. опыт: Сборки и тестирования различных конфигураций серверов и АРМ, разработки технической документации.",
		"need_match": true
	},
	{
		"id_rp": "991",
		"id_proj": "30",
		"name_rp": "Машинное обучение",
		"name_proj": "Разработка системы детектирования и идентификации объектов на кадрах.",
		"text_rp": "Данный курс знакомит слушателей с основными методами анализа данных. Рассматриваются основные этапы интеллектуального анализа, включая подготовку исходных данных, особенности выбора параметров алгоритмов, оценку и представление результатов анализа. Изучаются основные задачи интеллектуального анализа данных: классификация, кластеризация, поиск ассоциативных правил. На практике разбираются основные алгоритмы решения этих задач и особенности их применения для больших данных. Данный курс позволяет детально изучить понятия, задачи и методы интеллектуального анализа данных, предназначенные для создания математических моделей, адекватных окружающему миру и решения прикладных задач. . Целью освоения дисциплины «Машинное обучение» являются приобретение студентами теоретических знаний и формирование практических навыков по основам машинного обучения, овладение студентами инструментарием, моделями и методами машинного обучения для решение практических задач по анализу данных. Задачами изучения дисциплины являются: - изучение содержательной и математической постановки основных задач машинного обучения, получение знаний о методах машинного обучения и предобработки исходных данных, основных на- формирование знаний об основных понятиях, этапах анализа и интерпретации данных; умений по выбору наиболее подходящего способа решения задачи и обоснованию его эффективности, формирование навыков по представлению результатов работы алгоритмов машинного обучения; - освоение практических навыков по сбору данных, методов их анализа и обобщения, выбору средств и методов обработки данных для решения практических задач; представлению результатов анализа в форме, поддерживающей принятие решения в соответствии с поставленной задачей. Студенты получат знания по ключевым понятиям, целям и задачам использования машинного обучения для решения различных практических задач; изучат методологические основы применения алгоритмов машинного обучения. Дисциплина формирует умения по выбору метода машинного обучения, соответствующего научно-практической задаче, и его обоснованию, умения по объяснению и визуализации результатов работы алгоритмов машинного обучения, а также оценке качества моделей анализа. Дисциплина формирует практические навыки по применению программных инструментов и библиотек по предобработке исходных данных, построению моделей анализа, оценки качества моделей и визуализации полученных результатов. . . Министерство науки и высшего образования Российской Федерации ФГАОУ ВО «Санкт-Петербургский государственный электротехнический университет «ЛЭТИ» имени В.И. Ульянова (Ленина)» ____________________________________________________________ БИЛЕТ № 1 Дисциплина Машинное обучение   ФКТИ  1. Кластеризация. kMeans, DBSCAN. 2. Метрики качества классификации. Presicion-Recall и ROC кривые. AUC.  УТВЕРЖДАЮ Заведующий кафедрой                                                   В.В. Цехановский . . Введение в машинное обучение. Предмет и задачи машинного обучения и анализа данных. Основные принципы, задачи и подходы, использование в различных областях науки и индустрии. Основные этапы эволюции алгоритмов машинного обучения. Задача классификации. Линейные классификаторы. Линейные классификаторы. Общий вид метрического классификатора. Алгоритм K ближайших соседей. Метод опорных векторов. Линейные персептрон. Задача классификации. Деревья решений. Деревья решений. Правила и анализ качества (точность, полнота). Анализ с помощью ROC кривой. Алгоритм построения деревьев решений. Критерий информационного выигрыша и критерий Джини. Леса решающих деревьев. Задача классификации и регрессионный анализ. Линейная регрессия. Полиномиальная регрессия. Смещение и дисперсия. Ансамблевые методы. Голосование. Бутстраппинг. Бустинг, адаптивный бустинг, градиентный бустинг. Задача кластеризации. Формальная постановка задачи кластеризации. Алгоритмы кластеризации с фиксированным количеством кластеров. Алгоритмы кластеризации по плотности. Иерархическая кластеризация.",
		"text_proj": "Разработка системы детектирования и идентификации объектов на кадрах. Объект исследования: разрозненные геопривязанные кадры видео Предмет исследования: детекция, классификация и идентификация объектов интереса Цель: Определить, какому из заранее заданных классов принадлежит объект Проблема: Протяженность объектов может быть различной, в том числе, не помещающихся на одно изображение Формулировка задачи: необходимо разработать систему идентификации объектов, найденных системой вскрытия, определяющую тип и характеристики найденного объекта или помечающую выделенный объект, как неинтересный. Обязательно должен: знать: язык программирования (С++ или Java или Python); уметь: работать в команде. Желательно должен: знать: математические основы детекции объектов (понятие свёртки, машинного обучения.); владеть: английским языком достаточным для чтения статей. В результате получит: знания: математические основы компьютерного зрения, алгоритмы машинного обучения; умения: проведение научного исследования, прикладное создание программного фреймворка; опыт: работы на предприятии в условиях проекта, близкого к реальному. Сформировать список алгоритмов идентификации. Необходимо сформировать список алгоритмов идентификации. Создать framework, позволяющий решать задачу идентификации несколькими методами. Необходимо создать framework, позволяющий решать задачу идентификации несколькими методами. Сформировать критерии сравнения алгоритмов. Необходимо сформировать критерии сравнения алгоритмов. Сравнить запрограммированные алгоритмы по выбранным критериям. Необходимо сравнить запрограммированные алгоритмы по выбранным критериям.",
		"need_match": true
	},
	{
		"id_rp": "985",
		"id_proj": "8",
		"name_rp": "Основы компьютерного дизайна",
		"name_proj": "Разработка ИС \"Расписание\" / \"Деканат\".",
		"text_rp": "В курсе рассматриваются свойства зрительного восприятия человека, основы работы с цветом и цветовые модели, виды контраста, психология восприятия цветов и шрифтов, основы построения композиции, методика подбора шрифтов, рассматриваются основные требования и композиция наружной рекламы, основы web-дизайна. Также курс содержит руководства по построению эффективного взаимодействия с пользователем и основные принципы построения эргономичных пользовательских интерфейсов. Цель дисциплины - изучение теоретических основ компьютерного дизайна и формирование умений и навыков в области разработки эргономичных графических пользовательских интерфейсов различных систем. Формирование знаний, умений и навыков в области разработки эргономичных графических пользовательских интерфейсов различных систем. В результате изучения дисциплины студенты получают знания о законах зрительного восприятия человека, основных цветовых моделях, методах представления информации, основах построения композиции и подбора цветовой гаммы, принципах создания и подбора шрифтов, классификации и видах рекламы, основных правилах построения эргономичного пользовательского интерфейса, а также термины и определения, используемые в дизайне, виды и методы Usability-тестирования. Формирование умений работы с различными графическими пакетами для выполнения любой дизайнерской работы. Формирование навыков создания эргономичных графических пользовательских интерфейсов различных систем. . Министерство науки и высшего образования Российской Федерации ФГАОУ ВО «Санкт-Петербургский государственный электротехнический университет «ЛЭТИ» имени В.И. Ульянова (Ленина)» ____________________________________________________________ ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 1 Дисциплина \"Основы компьютерного дизайна\"  ФКТИ 1. Факторы, которые следует учитывать при выборе шрифта.  2. Советы по созданию эргономичного дизайна.   УТВЕРЖДАЮ Заведующий кафедрой                                                   В.В. Цехановский. . Введение. Цели и задачи курса. Основная литература. Основные этапы работы дизайнера. «Поиск идеи». Основные этапы работы дизайнера. Основные методы поиска «новых» идей. Свойства зрительного восприятия человека. Свойства зрительного восприятия человека. Перспектива и тень. Перспектива. Тень. Цвет. Теория цвета. Основные ошибки при подборе цветовой гаммы. Отклонения в различении цветов. Контраст. Основные виды контраста. Композиция. Понятие композиции и ее виды. Характеристики композиции. Некоторые композиционные приемы. Шрифтовые композиции. Шрифт. Типографика. Советы при выборе шрифта. Типографический дизайн и наружная реклама. Классификация рекламы. Методы и правила создания эффективной рекламы. Наружная реклама. Рекомендации по созданию фирменного стиля. Основы Web-дизайна. Основные понятия, общая структура главной страницы. Основные правила при создании дизайна веб-страниц. 10 главных ошибок веб-дизайна. Usability. Принципы проектирования эргономичного пользовательского интерфейса. 58 признаков хорошего пользовательского интерфейса. Эвристики Я. Нильсена. Гештальт принципы в дизайне. Заключение. Перспективы развития применения компьютерного дизайна в работе эргономиста",
		"text_proj": "Разработка ИС \"Расписание\" / \"Деканат\". Информационная система (ИС) \"Расписание\" обеспечивает процессы формирования и предоставления расписания в вузе. В рамках неё выполняется согласование пожеланий преподавателей, кафедр и возможностей аудиторного фонда ЛЭТИ. Система реализована на JavaScript с использованием фреймворка Svelte. Необходимо перевести систему на TypeScript, фреймворк Vue 2.0 с материальным дизайном Bootstrap (шаблон приложения будет дан). ИС \"Деканат\" предназначена для автоматизации процессов в деканате. В настоящее время осуществляется информационное обследование процессов деканата, разработка начнётся в середине марта. Технологии: TypeScript, фреймворк Vue 2.0 с материальным дизайном Bootstrap. Обязательно должен: знать: HTML, CSS, JavaScript, TypeScript. уметь выполнять:  проектирование интерфейса пользователя и запросов на web-сервер; разработку статического web-приложения; реализацию динамического web-приложения; подключение web-приложения к web-серверу; разработку модульных и интеграционных тестов; описание своих решений в виде справки для пользователя; владеть: основными навыками анализа требований пользователя, разработки web-приложений, работе в команде; технологиями совместной работы: git, wiki, bugtracker. Желательно должен: знать: фреймворки Vue 2.0, NestJS, Bootstrap; уметь: проектировать UX web-приложения; разрабатывать дизайн web-приложения; разрабатывать новые web-компоненты; разрабатывать серверную часть web-приложений; проектировать БД; выполнять нагрузочное тестирование; проверять web-приложение на взлом и готовить рекомендации по защите от взлома; работать в качестве технической поддержки для пользователя; описывать разработанные решения в виде публикаций; обладать навыком совместной разработки. В результате получит большинство знаний из перечисленных в \"Желательно должен\". Отбор студентов для проекта. После этого задания возможны следующие варианты:   - мы берём Вас на работу в отдел ОРПК ЛЭТИ (это основная цель участия в данном проекте, если Вы в этом не заинтересованы, то прошу сразу меня об этом уведомить), - мы даём дополнительное задание в случае высокой конкуренции либо   - мы рекомендуем Вас в другие проекты (в ЛЭТИ или других организациях). Интеграция созданных решений. Объединение полученных тестовых заданий в одну систему. Выполнение первого этапа проекта. Проектирование интерфейса пользователя Проектирование набора запросов на сервер Разработка статического web-приложения Разработка динамического web-приложения Проектирование структуры БД Разработка web-сервера Подключение к web-серверу Тестирование Проверка на взлом Опытная эксплуатация. 2. Формирование расписания для военно-учебного центра. 2.1. Клиентская часть ИС \"Расписание\" ЛЭТИ реализована с помощью фреймворка Svelte. Необходимо заданные в п.1 компоненты переписать на TypeScript+Vue2+Bootstrap, подготовить тесты и техническую документацию. Обращаю внимание, что разные компоненты выданы разным студентам, поэтому работать прошу именно с теми компонентами, которые указаны в п.1. В дальнейшем компоненты будут объединены в одно web-приложение. 2.2. Результаты прошу в виде pull request (PR) отправить в GIT. На написанный код будут выданы рекомендации/замечания/предложения, которые необходимо будет учесть. 2.3. К сожалению, данное задание не проверяет знания, умения и навыки по всему циклу разработки программного обеспечения, но позволяет \"окунуться\" в реальную разработку и проверить готовность решать реальные задачи. 2.4. Рекомендуемый срок выполнения до отправки первого PR: 2-3 недели, максимальный: 5 недель. Предполагается, что с рекомендациями/замечаниями/предложениями по PR Вы справитесь за 2-3 недели. 3. Формирование расписания для кафедры ФвиС. 2.1. Клиентская часть ИС \"Расписание\" ЛЭТИ реализована с помощью фреймворка Svelte. Необходимо заданные в п.1 компоненты переписать на TypeScript+Vue2+Bootstrap, подготовить тесты и техническую документацию. Обращаю внимание, что разные компоненты выданы разным студентам, поэтому работать прошу именно с теми компонентами, которые указаны в п.1. В дальнейшем компоненты будут объединены в одно web-приложение. 2.2. Результаты прошу в виде pull request (PR) отправить в GIT. На написанный код будут выданы рекомендации/замечания/предложения, которые необходимо будет учесть. 2.3. К сожалению, данное задание не проверяет знания, умения и навыки по всему циклу разработки программного обеспечения, но позволяет \"окунуться\" в реальную разработку и проверить готовность решать реальные задачи. 2.4. Рекомендуемый срок выполнения до отправки первого PR: 2-3 недели, максимальный: 5 недель. Предполагается, что с рекомендациями/замечаниями/предложениями по PR Вы справитесь за 2-3 недели. 4. Подтверждение перечня дисциплин. 2.1. Клиентская часть ИС \"Расписание\" ЛЭТИ реализована с помощью фреймворка Svelte. Необходимо заданные в п.1 компоненты переписать на TypeScript+Vue2+Bootstrap, подготовить тесты и техническую документацию. Обращаю внимание, что разные компоненты выданы разным студентам, поэтому работать прошу именно с теми компонентами, которые указаны в п.1. В дальнейшем компоненты будут объединены в одно web-приложение. 2.2. Результаты прошу в виде pull request (PR) отправить в GIT. На написанный код будут выданы рекомендации/замечания/предложения, которые необходимо будет учесть. 2.3. К сожалению, данное задание не проверяет знания, умения и навыки по всему циклу разработки программного обеспечения, но позволяет \"окунуться\" в реальную разработку и проверить готовность решать реальные задачи. 2.4. Рекомендуемый срок выполнения до отправки первого PR: 2-3 недели, максимальный: 5 недель. Предполагается, что с рекомендациями/замечаниями/предложениями по PR Вы справитесь за 2-3 недели. 6. Составление пожеланий по экзаменационной сессии. ",
		"need_match": true
	},
	{
		"id_rp": "998",
		"id_proj": "45",
		"name_rp": "Разработка в ядре Linux",
		"name_proj": "Разработка САПР на основе платформы Beremiz для отечественных ПЛК с процессорным ядром MIPS.",
		"text_rp": "дисциплина посвящена изучению проектирования компонентов программ; выбора подходящих шаблонов для решения задач из имеющейся номенклатуры; реализации и сопровождения программы на различных языках программирования, соответствующих дисциплине. дисциплина предусматривает умение использовать основные инструменты разработки для программирования в ядре linux; основные компоненты программно­технической архитектуры ядра linux и интерфейсов взаимодействия с ними; основные методы и приемы отладки. результатом освоения данного курса является применение современных компиляторов и отладчиков; проектирование типовых решений с учетом специфики программирования в ядре linux; использование возможностей существующей программной архитектуры ядра linux",
		"text_proj": "Разработка САПР на основе платформы Beremiz для отечественных ПЛК с процессорным ядром MIPS. Цель: адаптация и доработка открытого программного обеспечения среды разработки Beremiz для обеспечения функционирования отечественных программируемых логических контроллеров с ядром MIPS. Задачи: •Исследование эффективности оптимизирующих ключей компилятора для архитектуры MIPS. •Исследование архитектурных особенностей среды разработки Beremiz. •Интеграция протоколов МЭК в среду разработки Beremiz. Разработка тестов и верификация предложенных решений. Проект выполняется в интересах ФГУ ФНЦ НИИСИ РАН. Обязательно должен: знать: основы программирования; уметь: читать техническую документацию; владеть: языком C или Python. Желательно должен: знать: основы промышленной автоматики; уметь: работать с ПЛК; владеть: языками стандарта МЭК/IEC. В результате получит: знания: в области промышленной автоматики;  умения: в области разработки ПО для ПЛК на языках стандарта МЭК/IEC;  опыт: работы с IDE средами для промышленной автоматики.",
		"need_match": true
	}
]