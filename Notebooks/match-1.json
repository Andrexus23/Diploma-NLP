[
  {
    "id_rpd": 4776,
    "id_proj": 11,
    "name_rp": "Web-технологии",
    "name_proj": "Анализ динамики COVID-19 в России",
    "text_rp": "Курс «Web-технологии» охватывает широкий спектр технологий и подходов, использующихся при разработке Интернет-сайтов и web-приложений. Рассматриваются основы построения web-приложений с использованием HTML, CSS. Студенты последовательно изучают основы протокола HTTP, настройку web-сервера, основы JavaScript, TypeScript и PHP, построение статических HTML-страниц и оформления с использованием CSS, LESS и SASS, разработку сервера приложений с использованием Node.JS. Построение серверной части на основе Express и Nest, разработка клиентских приложений с использованием Angular, React и Vue. Выполнение модульного тестирования web-приложений, сборка приложений с использованием GULP и Webpack, обеспечение безопасности web-приложений.. Целью дисциплины является приобретение теоретических знаний о современных web-технологиях и фреймворках и практических навыков по всем этапам разработки web-приложений от разработки web-серверов, создания и оформления web-клиентов, организации защиты от взома. Задачами изучения дисциплины является приобретение теоретических знаний по проектированию web-приложений, формирование практических умений и навыков по разработке серверной и клиентской части web-приложений, оформлению и тестированию приложений. Знание основных подходов по построению клиентской и серверной части web-приложений, по оформлению web-страниц, в том числе для просмотра с мобильных устройств, по решению типовых задач тестирования, сборки и обеспечения безопасности web-приложений с использованием языков JavaScript, TypeScript, PHP. Умение разрабатывать клиентскую и серверную часть web-приложений, осуществлять настройку, тестирование и автоматизированную сборку web-приложений, решать базовые вопросы кибербезопасности. Формирование навыков создания статических HTML-страниц, динамических web-приложений на языках JavaScript и TypeScript, навыков применения современных фреймворков разработки клиентских и серверных частей web-приложений.. Тесты размещены в курсе Moodle, примеры вопросов: Сопоставьте коды состояний HTTP их описаниям В чём преимущество HTTP/2 по сравнению с предыдущими версиями протокола? Какой HTTP метод используется для описания параметров соединения с ресурсом? Какими функциями можно управлять с помощью HTTP? Выберите соответствие команд для управления модулями с помощью npm и yarn. Министерство науки и высшего образования Российской Федерации ФГАОУ ВО «Санкт-Петербургский государственный электротехнический университет «ЛЭТИ» имени В.И. Ульянова (Ленина)» ____________________________________________________________ ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 1 Дисциплина Web-технологии  ФКТИ 1. Что такое протокол HTTP? Какие он поддерживает методы, как передаёт параметры? Для чего предназначены заголовки?  2. Опишите структуру HTML, понятие DOM-модели. Как осуществляется обработка событий в HTML? УТВЕРЖДАЮ Заведующий кафедрой                                                   К. В. Кринкин. Тема 1. Введение. Введение. Описание трехуровневой архитектуры. Описание протокола HTTP: методы, параметры, запрос, ответ, заголовки, общие вопросы безопасности. Сервер nginx: установка, конфигурации, статическое содержимое, использование в качестве прокси. Apache-сервер. Тема 2. Основы языка JavaScript. Стандарт ECMAScript. Установка и основы использования Node.js. Язык JavaScript: базовые конструкции языка, строки, функции, объекты, классы, массивы, JSON, промисы, генераторы, Map, Set, прокси. Строгий режим JavaScript. Тема 3. Применение Node.js. Основы Deno. Работа с модулями. Использование npm и yarn, готовые модули. Событийная модель в Node.js. Создание простейшего сервера на Node.js. Эхо-сервер, параметры запроса, заголовки. Журналирование. Внешние сервера для журналирования: Rollbar – попытка отловить ошибки раньше пользователей, Sentry – прослеживание JavaScript. Работа с файлами и потоками. «Асинхронный try-catch». Использование nvm. Использование Deno: установка, настройка среды, разрешения и примеры. Тема 4. Основы HTML. Структура HTML, понятие DOM-модели. Базовые элементы и поддерживаемые ими атрибуты. Обработка событий в HTML. Элемент form, его атрибуты, соответствующие элементы: input, select, fieldset, textarea, button. Валидация введённых значений на JavaScript. Тема 5. Основы настройки стилей CSS, LESS, SASS. Оформление HTML с использованием CSS. Селекторы, свойства и их значения, псевдоклассы. Оформление границ, отступов, размеров, ссылок, списков, таблиц, текста, настройка шрифта, использование иконок. Позиционирование элементов. Адаптивная верстка, использование grid, flexbox. Использование шаблонов web-страниц, переменных в CSS. Работа с CSS с использованием JavaScript. Использование CSS-фильтров. Библиотека w3.css. Знакомство с фреймворками LESS и SASS. Тема 6. Применение Express, NestJS, RESTful, Ajax. Использование Express и Koa. Использование шаблонов на основе PUG и EJS. Cookies на сервере. Реализация сессии. Фреймворк NestJS: архитектура приложения, базовый пример на JavaScript, основные возможности, подключение шаблонов. Реализация RESTful на Node.js. Применение Ajax: XMLHttpRequest, fetch. Ограничения CORS. Тема 7. Основы использования библиотек jQuery и jQuery UI. Применение jQuery: селекторы, манипуляции с DOM, обработка событий использование свойств и классов CSS, эффекты, Ajax-запросы. Применение jQuery UI: взаимодействие, перетаскивание, изменение размера, выбираемые и сортируемые элементы, виджеты, аккордеон, автозаполнение, кнопки, переключатели, controlgroup, выбор даты, диалоговое окно, меню, отображение прогресса, selectmenu, бегунок, спиннер, вкладки, подсказки, темы. Знакомство с jQuery mobile. Тема 8. Основы языка TypeScript. Статический контроль с использованием Flow. Основы языка TypeScript: типы переменных, интерфейсы, классы, функции, шаблоны, перечисления, импорт-экспорт, пространства имён, конфигурации, JSX. Статический контроль в JavaScript с использованием Flow: настройка среды исполнения, использование из командной строки, проверка типов переменных, проверка параметров функций, generics, перечислимые типы. Тема 9. Основы работы с фреймворком Angular. Основы фреймворка Angular: структура приложения, компоненты, сервисы, иерархия сервисов. Создание директив, привязка, задание маршрутов, параметры маршрутизации. Использование шаблонных переменных, работа с дочерними компонентами, валидация данных, взаимодействие с сервером. Тема 10. Использование библиотеки React. Библиотека Immutable.JS. Применение JSX. Компоненты и их иерархия в библиотеке React, свойства, состояние переменных. Жизненный цикл компонентов, события. Работа с формами в React. Маршрутизация, хуки. Библиотека Redux для создания единого состояния приложения: действия, редьюсеры, хранилище. Тема 11. Основы работы с фреймворком Vue. Декларативная отрисовка в фреймоврке Vue. Работа с вводом пользователя. Условия и циклы. Композиция приложения из компонентов. Синтаксис шаблонов. Вычисляемые свойства и наблюдатели. Работа с классами и стилями. Маршрутизация. Применение Vuex для обеспечения единого состояния приложения. Тема 12. Тестирование web-приложений. Понятие TDD-разработки. Модульные тесты: Assert – встроенный в Node.js модуль для тестирования, применение принципов TDD; Should – библиотека утверждений; Chai – библиотека утверждений. Mocha – фреймворк для тестирования. Jest – фреймворк для тестирования. Тестирование с использованием Selenium, Selenium IDE, Protractor. Использование headless браузеров. Использованием Postman для тестирования web-сервера. Тема 13. Сборка приложений, новые возможности языка JavaScript. Автоматизация задач с помощью GULP, применение src, dest, обработка стилей, скриптов. Сборка модулей (bundle) с помощью Webpack: простая конфигурация (entry, output), использование загрузчиков и плагинов, контроль изменений кода при разработке, отладка web-приложений. Новые возможности JavaScript: web-сообщения, web-worker, web-сокеты (ws, socket.io). Возможности history, sessionStorage, localStorage, cookie. Авторизация с Passportjs. Работа с реляционными базами данных с использованием Sequelize ORM. Применение WebAssembly. Тема 14. Применение языка PHP. Настройка nginx для работы с php. Знакомство с языком PHP: область применения, основные элементы языка (переменные, условные операторы, циклы, строки, массивы, функции, элементы ООП), работа с файлами (в т.ч. xml), обработка запросов с клиента (get, post), обработка исключительных ситуаций и ошибок. Знакомство с CMS. Тема 15. Взлом и безопасность web-приложений. Возможные уязвимости web-приложений. Обеспечение безопасности web-приложения от взлома: SQL-уязвимость, Shell-код, Upload-уязвимость, Include-уязвимость, XSS-уязвимость. Инструменты проверки на наличие уязвимостей.",
    "text_proj": "Анализ динамики COVID-19 в России. ·       Web-приложение для отображения динамики различных характеристик распространения COVID-19 в России. ·       Приложение должно отображать различные характеристики, как исходные, так и производные, вычисленные приложением. Так же иногда полезно иметь возможность наложить несколько характеристик друг на друга. ·       Примеры исходных характеристик: динамика новых случаев, динамика выздоровлений. Примеры производных характеристик: разница между новыми случаями и выздоровлениями (больше людей заболевает или больше выздоравливает - растёт или уменьшается нагрузка на систему здравоохранения). Команда Frontend разработчик Backend разработчик iOS/Android разработчик. Как таковых обязательных требований нет. Смотрите желательные. . Технологический стек Frontend Javascript / typescript; фреймворки на выбор: React + Redux, Vue, Angular. Backend Java / Kotlin; Spring framework. C#; WebAPI, EntityFramework или Dapper. Mobile (опционально) iOS/Android приложение для отображения различных графиков. В результате получит: знания: разовьете свои знания по указанным технологиям опыт: работа в команде по методологии SCRUM, распределенной разработке, общее понимание коммерческой разработки Потенциальное трудоустройство . ",
    "need_match": true
  },
  {
    "id_rpd": 3490,
    "id_proj": 20,
    "name_rp": "Спецификация, проектирование и архитектура программных систем",
    "name_proj": "Построение аналитического решения, включая корпоративное хранилище данных в рамках проектов по внедрению биллинговых систем и связанных с ними дополнительных систем",
    "text_rp": "Дисциплина «Спецификация, проектирование и архитектура программных систем» предусматривает изучение методов выявления требований, анализа функциональных и нефункциональных требований, документирования требований и управления требованиями к программным системам, обеспечивает формирование знаний об организации архитектуры программных систем и умений по проектированию программных систем с применением современных методов и средств. Рассматриваются как проблемы общего характера, возникающие в процессе проектирование программных систем, так и конкретные методы, обеспечивающие достижение оптимального качества архитектуры системы с учетом результатов анализа требований.. Целью дисциплины является получение теоретических знаний в области спецификации, проектирования и архитектуры программных систем, а также практических навыков по применению полученных знаний для решения задач профессиональной деятельности. Задачей дисциплины является приобретение знаний, умений и навыков в области; - анализа требований с использованием стандартов и систем автоматизации разработки требований; - архитектур программных систем; - проектирования программных систем. Студенты должны приобрести знания: - формальных методов, технологий и инструментов разработки программного продукта, методов выявления требований, общих стратегий и конкретных методов проектирования программных систем; - основ моделирования и анализа программных систем, разработки, спецификации и управления требованиями; - теоретических основ архитектурной и программной организации информационных систем; - концепций и стратегий архитектурного проектирования программного продукта, видов структур и архитектур программных систем, их особенностей; - состава, форм и содержания документов, разрабатываемых при проектировании программных систем. Студенты должны приобрести умения: - разрабатывать и специфицировать требования, применять методы выявления и анализа функциональных и нефункциональных требований, использовать инструментальные средства, поддерживающие разработку и анализ требований; - конструировать программное обеспечение, разрабатывать основные программные документы, проводить структурную декомпозицию программной системы на компоненты, разрабатывать статические и динамические представления архитектуры программной системы; - использовать типовые архитектурные решения при проектировании программной системы, применять шаблоны проектирования и шаблоны интеграции. Студенты должны освоить навыки: - разработки и отладки программ на алгоритмических языках программирования, навыками разработки, анализа и документирования требований; - разработки архитектуры программной системы, методами обеспечения качества архитектуры программной системы, технологиями и средствами проектирования программных систем; - использования методов и средств разработки и оформления технической документации.. Вопрос №1 Назовите подход к проектированию автоматизированных систем, основанный на использовании единой модели предметной области  1.Структурное (функционально-модульное) проектирование  2.Объектно-ориентированный подход  3.Предметно-ориентированное проектирование  Вопрос №2 Укажите модель, на основании которой должны приниматься решения при проектировании (дизайне) автоматизированной системы  1. Модель требований  2. Дизайн системы  3. Модель реализации  4. Процессная модель  Вопрос №3 Укажите метафору, соответствующую автоматизированной системе, которая предназначена для ввода, структурированного хранения и обработки данных, оптимизированной для выполнения максимального количества транзакций за короткие промежутки времени  1.Учетная система  2.Аналитическая система  3.Потоковая система  4.Моделирующая система . Экзаменационный тест формируется из вопросов тестов текущего контроля и состоит из 54 вопросов . Министерство науки и высшего образования Российской Федерации ФГАОУ ВО «Санкт-Петербургский государственный электротехнический университет «ЛЭТИ» имени В.И. Ульянова (Ленина)» ____________________________________________________________ ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 1 Дисциплина Спецификация, проектирование и архитектура программных систем  ФКТИ 1. Требования в контексте системного проектирования.  2. UML и современные технологии.   УТВЕРЖДАЮ Заведующий кафедрой                                                   К.В. Кринкин. Введение. Место дисциплины в ООП. Рабочая программа дисциплины. Материал, выносимый на аттестацию. Формы проведения аттестации. Тема 1. Программная инженерия. Основные понятия и определения. Программная инженерия. Система. Окружение. Миссия. Заинтересованное лицо. Системный подход. Классификация информационных систем. Нормативно-методическое обеспечение. Стандарты Российской Федерации в области разработки программного обеспечения. SWEBoK. Предметно-ориентированное проектирование. Тема 2. Разработка программного обеспечения на основе моделей. Особенности программного проекта. Причины неудач в проектах. MDD-разработка. Способы описания функциональных требований. Стоимость сложности программного продукта. Валидация и верификация моделей. Тема 3. Каноническое проектирование информационной системы. Комплекс стандартов ГОСТ 34. Стадии канонического проектирования. Тема 4. Спецификация и управление требованиями. Требования в контексте системного проектирования. Требования и качество. Требования и процесс выполнения проекта. Общий процесс разработки требований. Описание и анализ требований. Разработка требований в области проблем. Разработка требований в области решений. Тема 5. Визуальное моделирование. Структурный подход. Что такое моделирование. Структурные методы анализа и проектирования программного обеспечения. Диаграммы IDEF. Диаграммы DFD. BPwin. Тема 6. Визуальное моделирование. Унифицированный язык моделирования UML. Методология анализа, проектирования и разработки программного обеспечения. Принципы объектно-ориентированной методологии разработки программного обеспечения. UML и современные технологии. Тема 7. Архитектура программных систем. Типовые архитектурные решения. Цель проектирования. Архитектура системы. Типовые решения (паттерны). Типовые решения распределенной обработки данных. Заключение. Общие выводы по курсу.",
    "text_proj": "Построение аналитического решения, включая корпоративное хранилище данных в рамках проектов по внедрению биллинговых систем и связанных с ними дополнительных систем. В настоящее время компания ведет ряд крупных проектов по внедрению биллинговых систем и связанных с ними дополнительных систем. В рамках каждого из этих проектов стоит задача построения аналитического решения, включая корпоративное хранилище данных. В качестве источников данных для корпоративного хранилища помимо биллинговой системы выступают CRM-система и ЛКК (Личный кабинет клиента).  В задачи Аналитика BI включается: Анализ систем-источников, их архитектуры данных и бизнес-процессов, которые они автоматизируют. Сбор и анализ требований Заказчика, документирование требований. Проектирование предметных областей в BI-решении (Договорная работа, Финансовый учет, CRM, ЛКК) Постановка задач на разработку. Проверка реализации функциональности и передача ее Заказчику. Обучение пользователей. Задачи проекта реализуются в рамках отдела информационно-аналитических систем департамента разработки бизнес-приложений. Важно владеть: Основами баз данных. Основами проектирования баз данных. Базовыми знания SQL для анализа данных. Подходами к обследованию, сбору требований. В результате участник получит опыт участия в производственном проекте в роли аналитика BI. ",
    "need_match": true
  },
  {
    "id_rpd": 4776,
    "id_proj": 34,
    "name_rp": "Web-технологии",
    "name_proj": "Разработка модулей «Кафедра» и «Деканат-2» для новой платформы сервисов личного кабинета",
    "text_rp": "Курс «Web-технологии» охватывает широкий спектр технологий и подходов, использующихся при разработке Интернет-сайтов и web-приложений. Рассматриваются основы построения web-приложений с использованием HTML, CSS. Студенты последовательно изучают основы протокола HTTP, настройку web-сервера, основы JavaScript, TypeScript и PHP, построение статических HTML-страниц и оформления с использованием CSS, LESS и SASS, разработку сервера приложений с использованием Node.JS. Построение серверной части на основе Express и Nest, разработка клиентских приложений с использованием Angular, React и Vue. Выполнение модульного тестирования web-приложений, сборка приложений с использованием GULP и Webpack, обеспечение безопасности web-приложений.. Целью дисциплины является приобретение теоретических знаний о современных web-технологиях и фреймворках и практических навыков по всем этапам разработки web-приложений от разработки web-серверов, создания и оформления web-клиентов, организации защиты от взома. Задачами изучения дисциплины является приобретение теоретических знаний по проектированию web-приложений, формирование практических умений и навыков по разработке серверной и клиентской части web-приложений, оформлению и тестированию приложений. Знание основных подходов по построению клиентской и серверной части web-приложений, по оформлению web-страниц, в том числе для просмотра с мобильных устройств, по решению типовых задач тестирования, сборки и обеспечения безопасности web-приложений с использованием языков JavaScript, TypeScript, PHP. Умение разрабатывать клиентскую и серверную часть web-приложений, осуществлять настройку, тестирование и автоматизированную сборку web-приложений, решать базовые вопросы кибербезопасности. Формирование навыков создания статических HTML-страниц, динамических web-приложений на языках JavaScript и TypeScript, навыков применения современных фреймворков разработки клиентских и серверных частей web-приложений.. Тесты размещены в курсе Moodle, примеры вопросов: Сопоставьте коды состояний HTTP их описаниям В чём преимущество HTTP/2 по сравнению с предыдущими версиями протокола? Какой HTTP метод используется для описания параметров соединения с ресурсом? Какими функциями можно управлять с помощью HTTP? Выберите соответствие команд для управления модулями с помощью npm и yarn. Министерство науки и высшего образования Российской Федерации ФГАОУ ВО «Санкт-Петербургский государственный электротехнический университет «ЛЭТИ» имени В.И. Ульянова (Ленина)» ____________________________________________________________ ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 1 Дисциплина Web-технологии  ФКТИ 1. Что такое протокол HTTP? Какие он поддерживает методы, как передаёт параметры? Для чего предназначены заголовки?  2. Опишите структуру HTML, понятие DOM-модели. Как осуществляется обработка событий в HTML? УТВЕРЖДАЮ Заведующий кафедрой                                                   К. В. Кринкин. Тема 1. Введение. Введение. Описание трехуровневой архитектуры. Описание протокола HTTP: методы, параметры, запрос, ответ, заголовки, общие вопросы безопасности. Сервер nginx: установка, конфигурации, статическое содержимое, использование в качестве прокси. Apache-сервер. Тема 2. Основы языка JavaScript. Стандарт ECMAScript. Установка и основы использования Node.js. Язык JavaScript: базовые конструкции языка, строки, функции, объекты, классы, массивы, JSON, промисы, генераторы, Map, Set, прокси. Строгий режим JavaScript. Тема 3. Применение Node.js. Основы Deno. Работа с модулями. Использование npm и yarn, готовые модули. Событийная модель в Node.js. Создание простейшего сервера на Node.js. Эхо-сервер, параметры запроса, заголовки. Журналирование. Внешние сервера для журналирования: Rollbar – попытка отловить ошибки раньше пользователей, Sentry – прослеживание JavaScript. Работа с файлами и потоками. «Асинхронный try-catch». Использование nvm. Использование Deno: установка, настройка среды, разрешения и примеры. Тема 4. Основы HTML. Структура HTML, понятие DOM-модели. Базовые элементы и поддерживаемые ими атрибуты. Обработка событий в HTML. Элемент form, его атрибуты, соответствующие элементы: input, select, fieldset, textarea, button. Валидация введённых значений на JavaScript. Тема 5. Основы настройки стилей CSS, LESS, SASS. Оформление HTML с использованием CSS. Селекторы, свойства и их значения, псевдоклассы. Оформление границ, отступов, размеров, ссылок, списков, таблиц, текста, настройка шрифта, использование иконок. Позиционирование элементов. Адаптивная верстка, использование grid, flexbox. Использование шаблонов web-страниц, переменных в CSS. Работа с CSS с использованием JavaScript. Использование CSS-фильтров. Библиотека w3.css. Знакомство с фреймворками LESS и SASS. Тема 6. Применение Express, NestJS, RESTful, Ajax. Использование Express и Koa. Использование шаблонов на основе PUG и EJS. Cookies на сервере. Реализация сессии. Фреймворк NestJS: архитектура приложения, базовый пример на JavaScript, основные возможности, подключение шаблонов. Реализация RESTful на Node.js. Применение Ajax: XMLHttpRequest, fetch. Ограничения CORS. Тема 7. Основы использования библиотек jQuery и jQuery UI. Применение jQuery: селекторы, манипуляции с DOM, обработка событий использование свойств и классов CSS, эффекты, Ajax-запросы. Применение jQuery UI: взаимодействие, перетаскивание, изменение размера, выбираемые и сортируемые элементы, виджеты, аккордеон, автозаполнение, кнопки, переключатели, controlgroup, выбор даты, диалоговое окно, меню, отображение прогресса, selectmenu, бегунок, спиннер, вкладки, подсказки, темы. Знакомство с jQuery mobile. Тема 8. Основы языка TypeScript. Статический контроль с использованием Flow. Основы языка TypeScript: типы переменных, интерфейсы, классы, функции, шаблоны, перечисления, импорт-экспорт, пространства имён, конфигурации, JSX. Статический контроль в JavaScript с использованием Flow: настройка среды исполнения, использование из командной строки, проверка типов переменных, проверка параметров функций, generics, перечислимые типы. Тема 9. Основы работы с фреймворком Angular. Основы фреймворка Angular: структура приложения, компоненты, сервисы, иерархия сервисов. Создание директив, привязка, задание маршрутов, параметры маршрутизации. Использование шаблонных переменных, работа с дочерними компонентами, валидация данных, взаимодействие с сервером. Тема 10. Использование библиотеки React. Библиотека Immutable.JS. Применение JSX. Компоненты и их иерархия в библиотеке React, свойства, состояние переменных. Жизненный цикл компонентов, события. Работа с формами в React. Маршрутизация, хуки. Библиотека Redux для создания единого состояния приложения: действия, редьюсеры, хранилище. Тема 11. Основы работы с фреймворком Vue. Декларативная отрисовка в фреймоврке Vue. Работа с вводом пользователя. Условия и циклы. Композиция приложения из компонентов. Синтаксис шаблонов. Вычисляемые свойства и наблюдатели. Работа с классами и стилями. Маршрутизация. Применение Vuex для обеспечения единого состояния приложения. Тема 12. Тестирование web-приложений. Понятие TDD-разработки. Модульные тесты: Assert – встроенный в Node.js модуль для тестирования, применение принципов TDD; Should – библиотека утверждений; Chai – библиотека утверждений. Mocha – фреймворк для тестирования. Jest – фреймворк для тестирования. Тестирование с использованием Selenium, Selenium IDE, Protractor. Использование headless браузеров. Использованием Postman для тестирования web-сервера. Тема 13. Сборка приложений, новые возможности языка JavaScript. Автоматизация задач с помощью GULP, применение src, dest, обработка стилей, скриптов. Сборка модулей (bundle) с помощью Webpack: простая конфигурация (entry, output), использование загрузчиков и плагинов, контроль изменений кода при разработке, отладка web-приложений. Новые возможности JavaScript: web-сообщения, web-worker, web-сокеты (ws, socket.io). Возможности history, sessionStorage, localStorage, cookie. Авторизация с Passportjs. Работа с реляционными базами данных с использованием Sequelize ORM. Применение WebAssembly. Тема 14. Применение языка PHP. Настройка nginx для работы с php. Знакомство с языком PHP: область применения, основные элементы языка (переменные, условные операторы, циклы, строки, массивы, функции, элементы ООП), работа с файлами (в т.ч. xml), обработка запросов с клиента (get, post), обработка исключительных ситуаций и ошибок. Знакомство с CMS. Тема 15. Взлом и безопасность web-приложений. Возможные уязвимости web-приложений. Обеспечение безопасности web-приложения от взлома: SQL-уязвимость, Shell-код, Upload-уязвимость, Include-уязвимость, XSS-уязвимость. Инструменты проверки на наличие уязвимостей.",
    "text_proj": "Разработка модулей «Кафедра» и «Деканат-2» для новой платформы сервисов личного кабинета. В рамках преобразования личного кабинета студентов, аспирантов и сотрудников необходимо выделить сервисы, которыми пользуются деканаты и кафедры в отдельные пользовательские интерфейсы. Новые интерфейсы должны агрегировать все возможности кафедр и деканатов в одном месте, а также реализовать новые возможности на основе имеющихся данных (например, получение списка задолженностей на выпускающей кафедре). Обязательно должен: знать: HTML, JS, CSS уметь: проектировать интерфейсы пользователя; проектировать RESTful API; писать интеграционные и юнит-тесты; документировать код; владеть: навыками анализа требований пользователя; навыками работы в команде; технологиями совместной работы: git, task-tracker. Желательно должен: знать: PHP, Node.js, Webpack, SCSS, Vue.js владеть:  навыками деловой переписки. ",
    "need_match": true
  },
  {
    "id_rpd": 4776,
    "id_proj": 8,
    "name_rp": "Web-технологии",
    "name_proj": "Разработка ИС \"Расписание\" / \"Деканат\"",
    "text_rp": "Курс «Web-технологии» охватывает широкий спектр технологий и подходов, использующихся при разработке Интернет-сайтов и web-приложений. Рассматриваются основы построения web-приложений с использованием HTML, CSS. Студенты последовательно изучают основы протокола HTTP, настройку web-сервера, основы JavaScript, TypeScript и PHP, построение статических HTML-страниц и оформления с использованием CSS, LESS и SASS, разработку сервера приложений с использованием Node.JS. Построение серверной части на основе Express и Nest, разработка клиентских приложений с использованием Angular, React и Vue. Выполнение модульного тестирования web-приложений, сборка приложений с использованием GULP и Webpack, обеспечение безопасности web-приложений.. Целью дисциплины является приобретение теоретических знаний о современных web-технологиях и фреймворках и практических навыков по всем этапам разработки web-приложений от разработки web-серверов, создания и оформления web-клиентов, организации защиты от взома. Задачами изучения дисциплины является приобретение теоретических знаний по проектированию web-приложений, формирование практических умений и навыков по разработке серверной и клиентской части web-приложений, оформлению и тестированию приложений. Знание основных подходов по построению клиентской и серверной части web-приложений, по оформлению web-страниц, в том числе для просмотра с мобильных устройств, по решению типовых задач тестирования, сборки и обеспечения безопасности web-приложений с использованием языков JavaScript, TypeScript, PHP. Умение разрабатывать клиентскую и серверную часть web-приложений, осуществлять настройку, тестирование и автоматизированную сборку web-приложений, решать базовые вопросы кибербезопасности. Формирование навыков создания статических HTML-страниц, динамических web-приложений на языках JavaScript и TypeScript, навыков применения современных фреймворков разработки клиентских и серверных частей web-приложений.. Тесты размещены в курсе Moodle, примеры вопросов: Сопоставьте коды состояний HTTP их описаниям В чём преимущество HTTP/2 по сравнению с предыдущими версиями протокола? Какой HTTP метод используется для описания параметров соединения с ресурсом? Какими функциями можно управлять с помощью HTTP? Выберите соответствие команд для управления модулями с помощью npm и yarn. Министерство науки и высшего образования Российской Федерации ФГАОУ ВО «Санкт-Петербургский государственный электротехнический университет «ЛЭТИ» имени В.И. Ульянова (Ленина)» ____________________________________________________________ ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 1 Дисциплина Web-технологии  ФКТИ 1. Что такое протокол HTTP? Какие он поддерживает методы, как передаёт параметры? Для чего предназначены заголовки?  2. Опишите структуру HTML, понятие DOM-модели. Как осуществляется обработка событий в HTML? УТВЕРЖДАЮ Заведующий кафедрой                                                   К. В. Кринкин. Тема 1. Введение. Введение. Описание трехуровневой архитектуры. Описание протокола HTTP: методы, параметры, запрос, ответ, заголовки, общие вопросы безопасности. Сервер nginx: установка, конфигурации, статическое содержимое, использование в качестве прокси. Apache-сервер. Тема 2. Основы языка JavaScript. Стандарт ECMAScript. Установка и основы использования Node.js. Язык JavaScript: базовые конструкции языка, строки, функции, объекты, классы, массивы, JSON, промисы, генераторы, Map, Set, прокси. Строгий режим JavaScript. Тема 3. Применение Node.js. Основы Deno. Работа с модулями. Использование npm и yarn, готовые модули. Событийная модель в Node.js. Создание простейшего сервера на Node.js. Эхо-сервер, параметры запроса, заголовки. Журналирование. Внешние сервера для журналирования: Rollbar – попытка отловить ошибки раньше пользователей, Sentry – прослеживание JavaScript. Работа с файлами и потоками. «Асинхронный try-catch». Использование nvm. Использование Deno: установка, настройка среды, разрешения и примеры. Тема 4. Основы HTML. Структура HTML, понятие DOM-модели. Базовые элементы и поддерживаемые ими атрибуты. Обработка событий в HTML. Элемент form, его атрибуты, соответствующие элементы: input, select, fieldset, textarea, button. Валидация введённых значений на JavaScript. Тема 5. Основы настройки стилей CSS, LESS, SASS. Оформление HTML с использованием CSS. Селекторы, свойства и их значения, псевдоклассы. Оформление границ, отступов, размеров, ссылок, списков, таблиц, текста, настройка шрифта, использование иконок. Позиционирование элементов. Адаптивная верстка, использование grid, flexbox. Использование шаблонов web-страниц, переменных в CSS. Работа с CSS с использованием JavaScript. Использование CSS-фильтров. Библиотека w3.css. Знакомство с фреймворками LESS и SASS. Тема 6. Применение Express, NestJS, RESTful, Ajax. Использование Express и Koa. Использование шаблонов на основе PUG и EJS. Cookies на сервере. Реализация сессии. Фреймворк NestJS: архитектура приложения, базовый пример на JavaScript, основные возможности, подключение шаблонов. Реализация RESTful на Node.js. Применение Ajax: XMLHttpRequest, fetch. Ограничения CORS. Тема 7. Основы использования библиотек jQuery и jQuery UI. Применение jQuery: селекторы, манипуляции с DOM, обработка событий использование свойств и классов CSS, эффекты, Ajax-запросы. Применение jQuery UI: взаимодействие, перетаскивание, изменение размера, выбираемые и сортируемые элементы, виджеты, аккордеон, автозаполнение, кнопки, переключатели, controlgroup, выбор даты, диалоговое окно, меню, отображение прогресса, selectmenu, бегунок, спиннер, вкладки, подсказки, темы. Знакомство с jQuery mobile. Тема 8. Основы языка TypeScript. Статический контроль с использованием Flow. Основы языка TypeScript: типы переменных, интерфейсы, классы, функции, шаблоны, перечисления, импорт-экспорт, пространства имён, конфигурации, JSX. Статический контроль в JavaScript с использованием Flow: настройка среды исполнения, использование из командной строки, проверка типов переменных, проверка параметров функций, generics, перечислимые типы. Тема 9. Основы работы с фреймворком Angular. Основы фреймворка Angular: структура приложения, компоненты, сервисы, иерархия сервисов. Создание директив, привязка, задание маршрутов, параметры маршрутизации. Использование шаблонных переменных, работа с дочерними компонентами, валидация данных, взаимодействие с сервером. Тема 10. Использование библиотеки React. Библиотека Immutable.JS. Применение JSX. Компоненты и их иерархия в библиотеке React, свойства, состояние переменных. Жизненный цикл компонентов, события. Работа с формами в React. Маршрутизация, хуки. Библиотека Redux для создания единого состояния приложения: действия, редьюсеры, хранилище. Тема 11. Основы работы с фреймворком Vue. Декларативная отрисовка в фреймоврке Vue. Работа с вводом пользователя. Условия и циклы. Композиция приложения из компонентов. Синтаксис шаблонов. Вычисляемые свойства и наблюдатели. Работа с классами и стилями. Маршрутизация. Применение Vuex для обеспечения единого состояния приложения. Тема 12. Тестирование web-приложений. Понятие TDD-разработки. Модульные тесты: Assert – встроенный в Node.js модуль для тестирования, применение принципов TDD; Should – библиотека утверждений; Chai – библиотека утверждений. Mocha – фреймворк для тестирования. Jest – фреймворк для тестирования. Тестирование с использованием Selenium, Selenium IDE, Protractor. Использование headless браузеров. Использованием Postman для тестирования web-сервера. Тема 13. Сборка приложений, новые возможности языка JavaScript. Автоматизация задач с помощью GULP, применение src, dest, обработка стилей, скриптов. Сборка модулей (bundle) с помощью Webpack: простая конфигурация (entry, output), использование загрузчиков и плагинов, контроль изменений кода при разработке, отладка web-приложений. Новые возможности JavaScript: web-сообщения, web-worker, web-сокеты (ws, socket.io). Возможности history, sessionStorage, localStorage, cookie. Авторизация с Passportjs. Работа с реляционными базами данных с использованием Sequelize ORM. Применение WebAssembly. Тема 14. Применение языка PHP. Настройка nginx для работы с php. Знакомство с языком PHP: область применения, основные элементы языка (переменные, условные операторы, циклы, строки, массивы, функции, элементы ООП), работа с файлами (в т.ч. xml), обработка запросов с клиента (get, post), обработка исключительных ситуаций и ошибок. Знакомство с CMS. Тема 15. Взлом и безопасность web-приложений. Возможные уязвимости web-приложений. Обеспечение безопасности web-приложения от взлома: SQL-уязвимость, Shell-код, Upload-уязвимость, Include-уязвимость, XSS-уязвимость. Инструменты проверки на наличие уязвимостей.",
    "text_proj": "Разработка ИС \"Расписание\" / \"Деканат\". Информационная система (ИС) \"Расписание\" обеспечивает процессы формирования и предоставления расписания в вузе. В рамках неё выполняется согласование пожеланий преподавателей, кафедр и возможностей аудиторного фонда ЛЭТИ. Система реализована на JavaScript с использованием фреймворка Svelte. Необходимо перевести систему на TypeScript, фреймворк Vue 2.0 с материальным дизайном Bootstrap (шаблон приложения будет дан). ИС \"Деканат\" предназначена для автоматизации процессов в деканате. В настоящее время осуществляется информационное обследование процессов деканата, разработка начнётся в середине марта. Технологии: TypeScript, фреймворк Vue 2.0 с материальным дизайном Bootstrap. Обязательно должен: знать: HTML, CSS, JavaScript, TypeScript. уметь выполнять:  проектирование интерфейса пользователя и запросов на web-сервер; разработку статического web-приложения; реализацию динамического web-приложения; подключение web-приложения к web-серверу; разработку модульных и интеграционных тестов; описание своих решений в виде справки для пользователя; владеть: основными навыками анализа требований пользователя, разработки web-приложений, работе в команде; технологиями совместной работы: git, wiki, bugtracker. Желательно должен: знать: фреймворки Vue 2.0, NestJS, Bootstrap; уметь: проектировать UX web-приложения; разрабатывать дизайн web-приложения; разрабатывать новые web-компоненты; разрабатывать серверную часть web-приложений; проектировать БД; выполнять нагрузочное тестирование; проверять web-приложение на взлом и готовить рекомендации по защите от взлома; работать в качестве технической поддержки для пользователя; описывать разработанные решения в виде публикаций; обладать навыком совместной разработки. В результате получит большинство знаний из перечисленных в \"Желательно должен\". Отбор студентов для проекта. После этого задания возможны следующие варианты:   - мы берём Вас на работу в отдел ОРПК ЛЭТИ (это основная цель участия в данном проекте, если Вы в этом не заинтересованы, то прошу сразу меня об этом уведомить), - мы даём дополнительное задание в случае высокой конкуренции либо   - мы рекомендуем Вас в другие проекты (в ЛЭТИ или других организациях). Интеграция созданных решений. Объединение полученных тестовых заданий в одну систему. Выполнение первого этапа проекта. Проектирование интерфейса пользователя Проектирование набора запросов на сервер Разработка статического web-приложения Разработка динамического web-приложения Проектирование структуры БД Разработка web-сервера Подключение к web-серверу Тестирование Проверка на взлом Опытная эксплуатация. 2. Формирование расписания для военно-учебного центра. 2.1. Клиентская часть ИС \"Расписание\" ЛЭТИ реализована с помощью фреймворка Svelte. Необходимо заданные в п.1 компоненты переписать на TypeScript+Vue2+Bootstrap, подготовить тесты и техническую документацию. Обращаю внимание, что разные компоненты выданы разным студентам, поэтому работать прошу именно с теми компонентами, которые указаны в п.1. В дальнейшем компоненты будут объединены в одно web-приложение. 2.2. Результаты прошу в виде pull request (PR) отправить в GIT. На написанный код будут выданы рекомендации/замечания/предложения, которые необходимо будет учесть. 2.3. К сожалению, данное задание не проверяет знания, умения и навыки по всему циклу разработки программного обеспечения, но позволяет \"окунуться\" в реальную разработку и проверить готовность решать реальные задачи. 2.4. Рекомендуемый срок выполнения до отправки первого PR: 2-3 недели, максимальный: 5 недель. Предполагается, что с рекомендациями/замечаниями/предложениями по PR Вы справитесь за 2-3 недели. 3. Формирование расписания для кафедры ФвиС. 2.1. Клиентская часть ИС \"Расписание\" ЛЭТИ реализована с помощью фреймворка Svelte. Необходимо заданные в п.1 компоненты переписать на TypeScript+Vue2+Bootstrap, подготовить тесты и техническую документацию. Обращаю внимание, что разные компоненты выданы разным студентам, поэтому работать прошу именно с теми компонентами, которые указаны в п.1. В дальнейшем компоненты будут объединены в одно web-приложение. 2.2. Результаты прошу в виде pull request (PR) отправить в GIT. На написанный код будут выданы рекомендации/замечания/предложения, которые необходимо будет учесть. 2.3. К сожалению, данное задание не проверяет знания, умения и навыки по всему циклу разработки программного обеспечения, но позволяет \"окунуться\" в реальную разработку и проверить готовность решать реальные задачи. 2.4. Рекомендуемый срок выполнения до отправки первого PR: 2-3 недели, максимальный: 5 недель. Предполагается, что с рекомендациями/замечаниями/предложениями по PR Вы справитесь за 2-3 недели. 4. Подтверждение перечня дисциплин. 2.1. Клиентская часть ИС \"Расписание\" ЛЭТИ реализована с помощью фреймворка Svelte. Необходимо заданные в п.1 компоненты переписать на TypeScript+Vue2+Bootstrap, подготовить тесты и техническую документацию. Обращаю внимание, что разные компоненты выданы разным студентам, поэтому работать прошу именно с теми компонентами, которые указаны в п.1. В дальнейшем компоненты будут объединены в одно web-приложение. 2.2. Результаты прошу в виде pull request (PR) отправить в GIT. На написанный код будут выданы рекомендации/замечания/предложения, которые необходимо будет учесть. 2.3. К сожалению, данное задание не проверяет знания, умения и навыки по всему циклу разработки программного обеспечения, но позволяет \"окунуться\" в реальную разработку и проверить готовность решать реальные задачи. 2.4. Рекомендуемый срок выполнения до отправки первого PR: 2-3 недели, максимальный: 5 недель. Предполагается, что с рекомендациями/замечаниями/предложениями по PR Вы справитесь за 2-3 недели. 6. Составление пожеланий по экзаменационной сессии. 2.1. Клиентская часть ИС \"Расписание\" ЛЭТИ реализована с помощью фреймворка Svelte. Необходимо заданные в п.1 компоненты переписать на TypeScript+Vue2+Bootstrap, подготовить тесты и техническую документацию. Обращаю внимание, что разные компоненты выданы разным студентам, поэтому работать прошу именно с теми компонентами, которые указаны в п.1. В дальнейшем компоненты будут объединены в одно web-приложение. 2.2. Результаты прошу в виде pull request (PR) отправить в GIT. На написанный код будут выданы рекомендации/замечания/предложения, которые необходимо будет учесть. 2.3. К сожалению, данное задание не проверяет знания, умения и навыки по всему циклу разработки программного обеспечения, но позволяет \"окунуться\" в реальную разработку и проверить готовность решать реальные задачи. 2.4. Рекомендуемый срок выполнения до отправки первого PR: 2-3 недели, максимальный: 5 недель. Предполагается, что с рекомендациями/замечаниями/предложениями по PR Вы справитесь за 2-3 недели. 7. Составление пожеланий по экзаменационной сессии. 2.1. Клиентская часть ИС \"Расписание\" ЛЭТИ реализована с помощью фреймворка Svelte. Необходимо заданные в п.1 компоненты переписать на TypeScript+Vue2+Bootstrap, подготовить тесты и техническую документацию. Обращаю внимание, что разные компоненты выданы разным студентам, поэтому работать прошу именно с теми компонентами, которые указаны в п.1. В дальнейшем компоненты будут объединены в одно web-приложение. 2.2. Результаты прошу в виде pull request (PR) отправить в GIT. На написанный код будут выданы рекомендации/замечания/предложения, которые необходимо будет учесть. 2.3. К сожалению, данное задание не проверяет знания, умения и навыки по всему циклу разработки программного обеспечения, но позволяет \"окунуться\" в реальную разработку и проверить готовность решать реальные задачи. 2.4. Рекомендуемый срок выполнения до отправки первого PR: 2-3 недели, максимальный: 5 недель. Предполагается, что с рекомендациями/замечаниями/предложениями по PR Вы справитесь за 2-3 недели. 5. Согласование экзаменационной сессии. 2.1. Клиентская часть ИС \"Расписание\" ЛЭТИ реализована с помощью фреймворка Svelte. Необходимо заданные в п.1 компоненты переписать на TypeScript+Vue2+Bootstrap, подготовить тесты и техническую документацию. Обращаю внимание, что разные компоненты выданы разным студентам, поэтому работать прошу именно с теми компонентами, которые указаны в п.1. В дальнейшем компоненты будут объединены в одно web-приложение. 2.2. Результаты прошу в виде pull request (PR) отправить в GIT. На написанный код будут выданы рекомендации/замечания/предложения, которые необходимо будет учесть. 2.3. К сожалению, данное задание не проверяет знания, умения и навыки по всему циклу разработки программного обеспечения, но позволяет \"окунуться\" в реальную разработку и проверить готовность решать реальные задачи. 2.4. Рекомендуемый срок выполнения до отправки первого PR: 2-3 недели, максимальный: 5 недель. Предполагается, что с рекомендациями/замечаниями/предложениями по PR Вы справитесь за 2-3 недели. 8. Составление пожеланий по расписанию (часть 2). 2.1. Клиентская часть ИС \"Расписание\" ЛЭТИ реализована с помощью фреймворка Svelte. Необходимо заданные в п.1 компоненты переписать на TypeScript+Vue2+Bootstrap, подготовить тесты и техническую документацию. Обращаю внимание, что разные компоненты выданы разным студентам, поэтому работать прошу именно с теми компонентами, которые указаны в п.1. В дальнейшем компоненты будут объединены в одно web-приложение. 2.2. Результаты прошу в виде pull request (PR) отправить в GIT. На написанный код будут выданы рекомендации/замечания/предложения, которые необходимо будет учесть. 2.3. К сожалению, данное задание не проверяет знания, умения и навыки по всему циклу разработки программного обеспечения, но позволяет \"окунуться\" в реальную разработку и проверить готовность решать реальные задачи. 2.4. Рекомендуемый срок выполнения до отправки первого PR: 2-3 недели, максимальный: 5 недель. Предполагается, что с рекомендациями/замечаниями/предложениями по PR Вы справитесь за 2-3 недели. 9. Назначение преподавателей на дисциплины. 2.1. Клиентская часть ИС \"Расписание\" ЛЭТИ реализована с помощью фреймворка Svelte. Необходимо заданные в п.1 компоненты переписать на TypeScript+Vue2+Bootstrap, подготовить тесты и техническую документацию. Обращаю внимание, что разные компоненты выданы разным студентам, поэтому работать прошу именно с теми компонентами, которые указаны в п.1. В дальнейшем компоненты будут объединены в одно web-приложение. 2.2. Результаты прошу в виде pull request (PR) отправить в GIT. На написанный код будут выданы рекомендации/замечания/предложения, которые необходимо будет учесть. 2.3. К сожалению, данное задание не проверяет знания, умения и навыки по всему циклу разработки программного обеспечения, но позволяет \"окунуться\" в реальную разработку и проверить готовность решать реальные задачи. 2.4. Рекомендуемый срок выполнения до отправки первого PR: 2-3 недели, максимальный: 5 недель. Предполагается, что с рекомендациями/замечаниями/предложениями по PR Вы справитесь за 2-3 недели. 11. Пожелания преподавателей по экзаменационной сессии. 2.1. Клиентская часть ИС \"Расписание\" ЛЭТИ реализована с помощью фреймворка Svelte. Необходимо заданные в п.1 компоненты переписать на TypeScript+Vue2+Bootstrap, подготовить тесты и техническую документацию. Обращаю внимание, что разные компоненты выданы разным студентам, поэтому работать прошу именно с теми компонентами, которые указаны в п.1. В дальнейшем компоненты будут объединены в одно web-приложение. 2.2. Результаты прошу в виде pull request (PR) отправить в GIT. На написанный код будут выданы рекомендации/замечания/предложения, которые необходимо будет учесть. 2.3. К сожалению, данное задание не проверяет знания, умения и навыки по всему циклу разработки программного обеспечения, но позволяет \"окунуться\" в реальную разработку и проверить готовность решать реальные задачи. 2.4. Рекомендуемый срок выполнения до отправки первого PR: 2-3 недели, максимальный: 5 недель. Предполагается, что с рекомендациями/замечаниями/предложениями по PR Вы справитесь за 2-3 недели. 13. Последняя версия расписания (черновик). 2.1. Клиентская часть ИС \"Расписание\" ЛЭТИ реализована с помощью фреймворка Svelte. Необходимо заданные в п.1 компоненты переписать на TypeScript+Vue2+Bootstrap, подготовить тесты и техническую документацию. Обращаю внимание, что разные компоненты выданы разным студентам, поэтому работать прошу именно с теми компонентами, которые указаны в п.1. В дальнейшем компоненты будут объединены в одно web-приложение. 2.2. Результаты прошу в виде pull request (PR) отправить в GIT. На написанный код будут выданы рекомендации/замечания/предложения, которые необходимо будет учесть. 2.3. К сожалению, данное задание не проверяет знания, умения и навыки по всему циклу разработки программного обеспечения, но позволяет \"окунуться\" в реальную разработку и проверить готовность решать реальные задачи. 2.4. Рекомендуемый срок выполнения до отправки первого PR: 2-3 недели, максимальный: 5 недель. Предполагается, что с рекомендациями/замечаниями/предложениями по PR Вы справитесь за 2-3 недели. 8. Составление пожеланий по расписанию (часть 1). 2.1. Клиентская часть ИС \"Расписание\" ЛЭТИ реализована с помощью фреймворка Svelte. Необходимо заданные в п.1 компоненты переписать на TypeScript+Vue2+Bootstrap, подготовить тесты и техническую документацию. Обращаю внимание, что разные компоненты выданы разным студентам, поэтому работать прошу именно с теми компонентами, которые указаны в п.1. В дальнейшем компоненты будут объединены в одно web-приложение. 2.2. Результаты прошу в виде pull request (PR) отправить в GIT. На написанный код будут выданы рекомендации/замечания/предложения, которые необходимо будет учесть. 2.3. К сожалению, данное задание не проверяет знания, умения и навыки по всему циклу разработки программного обеспечения, но позволяет \"окунуться\" в реальную разработку и проверить готовность решать реальные задачи. 2.4. Рекомендуемый срок выполнения до отправки первого PR: 2-3 недели, максимальный: 5 недель. Предполагается, что с рекомендациями/замечаниями/предложениями по PR Вы справитесь за 2-3 недели. 12. Бронирование аудиторий. 2.1. Клиентская часть ИС \"Расписание\" ЛЭТИ реализована с помощью фреймворка Svelte. Необходимо заданные в п.1 компоненты переписать на TypeScript+Vue2+Bootstrap, подготовить тесты и техническую документацию. Обращаю внимание, что разные компоненты выданы разным студентам, поэтому работать прошу именно с теми компонентами, которые указаны в п.1. В дальнейшем компоненты будут объединены в одно web-приложение. 2.2. Результаты прошу в виде pull request (PR) отправить в GIT. На написанный код будут выданы рекомендации/замечания/предложения, которые необходимо будет учесть. 2.3. К сожалению, данное задание не проверяет знания, умения и навыки по всему циклу разработки программного обеспечения, но позволяет \"окунуться\" в реальную разработку и проверить готовность решать реальные задачи. 2.4. Рекомендуемый срок выполнения до отправки первого PR: 2-3 недели, максимальный: 5 недель. Предполагается, что с рекомендациями/замечаниями/предложениями по PR Вы справитесь за 2-3 недели. 10. Пожелания преподавателей по расписанию. 2.1. Клиентская часть ИС \"Расписание\" ЛЭТИ реализована с помощью фреймворка Svelte. Необходимо заданные в п.1 компоненты переписать на TypeScript+Vue2+Bootstrap, подготовить тесты и техническую документацию. Обращаю внимание, что разные компоненты выданы разным студентам, поэтому работать прошу именно с теми компонентами, которые указаны в п.1. В дальнейшем компоненты будут объединены в одно web-приложение. 2.2. Результаты прошу в виде pull request (PR) отправить в GIT. На написанный код будут выданы рекомендации/замечания/предложения, которые необходимо будет учесть. 2.3. К сожалению, данное задание не проверяет знания, умения и навыки по всему циклу разработки программного обеспечения, но позволяет \"окунуться\" в реальную разработку и проверить готовность решать реальные задачи. 2.4. Рекомендуемый срок выполнения до отправки первого PR: 2-3 недели, максимальный: 5 недель. Предполагается, что с рекомендациями/замечаниями/предложениями по PR Вы справитесь за 2-3 недели. 14. Управление семестром. Настройка дат и Факультеты, наборы. 2.1. Клиентская часть ИС \"Расписание\" ЛЭТИ реализована с помощью фреймворка Svelte. Необходимо заданные в п.1 компоненты переписать на TypeScript+Vue2+Bootstrap, подготовить тесты и техническую документацию. Обращаю внимание, что разные компоненты выданы разным студентам, поэтому работать прошу именно с теми компонентами, которые указаны в п.1. В дальнейшем компоненты будут объединены в одно web-приложение. 2.2. Результаты прошу в виде pull request (PR) отправить в GIT. На написанный код будут выданы рекомендации/замечания/предложения, которые необходимо будет учесть. 2.3. К сожалению, данное задание не проверяет знания, умения и навыки по всему циклу разработки программного обеспечения, но позволяет \"окунуться\" в реальную разработку и проверить готовность решать реальные задачи. 2.4. Рекомендуемый срок выполнения до отправки первого PR: 2-3 недели, максимальный: 5 недель. Предполагается, что с рекомендациями/замечаниями/предложениями по PR Вы справитесь за 2-3 недели. 1. Формирование расписания для кафедры ИнЯз. 2.1. Клиентская часть ИС \"Расписание\" ЛЭТИ реализована с помощью фреймворка Svelte. Необходимо заданные в п.1 компоненты переписать на TypeScript+Vue2+Bootstrap, подготовить тесты и техническую документацию. Обращаю внимание, что разные компоненты выданы разным студентам, поэтому работать прошу именно с теми компонентами, которые указаны в п.1. В дальнейшем компоненты будут объединены в одно web-приложение. 2.2. Результаты прошу в виде pull request (PR) отправить в GIT. На написанный код будут выданы рекомендации/замечания/предложения, которые необходимо будет учесть. 2.3. К сожалению, данное задание не проверяет знания, умения и навыки по всему циклу разработки программного обеспечения, но позволяет \"окунуться\" в реальную разработку и проверить готовность решать реальные задачи. 2.4. Рекомендуемый срок выполнения до отправки первого PR: 2-3 недели, максимальный: 5 недель. Предполагается, что с рекомендациями/замечаниями/предложениями по PR Вы справитесь за 2-3 недели. ",
    "need_match": true
  },
  {
    "id_rpd": 4770,
    "id_proj": 48,
    "name_rp": "Машинное обучение",
    "name_proj": "Разработка рекомендательной машины ",
    "text_rp": "Дисциплина посвящена знакомству с основными понятиями машинного обучения, алгоритмами, которые могут «обучаться» на данных с целью прогнозирования и принятия решений. Рассматриваются основные классы задач машинного обучения, такие как классификация, кластеризация, регрессия, снижение размерности, ранжирование. Особое внимание уделяется рассмотрению современных инструментов в этой области и приобретению практических навыков для использования аппарата машинного обучения в прикладных задачах.. Изучение дисциплины нацелено на приобретение знаний об основных понятиях, проблемах и современных математических методах машинного обучения, и формирование практических навыков их применения для решения задач профессиональной деятельности. Освоение математических методов и алгоритмов машинного обучения, позволяющих получать формализованные постановки задач машинного обучения. Приобретение знаний о способах проведения численных экспериментов и интерпретации полученных результатов. Формирование умения модифицировать известные или создавать новые методы машинного обучения. Получение навыков реализации и применения алгоритмов машинного обучения для решения прикладных задач.. Пример вопросов теста текущего контроля Тесты состоят из 20 вопросов с возможностью выбора одного или нескольких вариантов ответа.  1. Методы машинного обучения: a)   решают задачу в аналитическом виде b)  выделяют закономерности в данных c) производят поиск готового решения в БД 2. Если для модели машинного обучения необходимы данные с известным результатом, то данная модель обучается: a)   С учителем b)  Без учителя c)  С подкреплением 3. Какие перечисленные библиотеки Python используются для хранения И обработки данных: a)   MatPlotLib b)  NumPy c)   Pandas d)  Sklearn. Министерство науки и высшего образования Российской Федерации ФГАОУ ВО «Санкт-Петербургский государственный электротехнический университет «ЛЭТИ» имени В.И. Ульянова (Ленина)» ____________________________________________________________ ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 1 Дисциплина Машинное обучение   ФКТИ 1. Формальная постановка задачи обучения с учителем 2. Логистическая и мультиномиальная регрессия 3. Кластеризация. Модель смеси распределений. УТВЕРЖДАЮ Заведующий кафедрой               К.В. Кринкин                             . Тема 1. Основы машинного обучения. Понятие машинного обучения. Отличие от традиционного подхода решения задач. Тема 2. Классификация подходов в машинном обучении. Обучение с учителем. Обучение без учителя. Обучения с подкреплением. Пакетное и динамическое обучение. Обучение на основе образцов. Обучение на основе моделей. Тема 3. Представление и предобработка данных. Представление данных, тензоры. Необходимость предобработки данных. Стандартизация данных. Приведения данных к одному диапазону. Недостающие значения в наборах данных. Тема 4. Метрики оценки моделей. Необходимость оценки моделей. Метрики для регрессионных моделей. Метрики для классифицирующих моделей. Метрики для моделей кластеризации. Тема 5. Регрессия. Регрессия. Линейная регрессия. Гребневая регрессия. Лассо регрессия. Регрессия в sklearn. Тема 6. Классификация. Классификация. Виды классификации. KNN. SVC. Решающие деревья/случайный лес. Наивный Байесовский классификатор. Линейный дискриминантный анализ. Логистическая регрессия. Классификация в sklearn. Тема 7. Кластеризация. Кластеризация. Иерархическая кластеризация. K-средних. OPTICS. DBSCAN. Спектральная кластеризация. Заключение. Перспективы применения методов машинного обучения к решению прикладных задач",
    "text_proj": "Разработка рекомендательной машины. Рекомендательная машина необходима для помощи в выборе, который осуществляется обучающимся на всем периоде обучения, начиная от выбора направления при поступлении и выбора вакансии при трудоустройстве или смены работы. При этом выбор не ограничивается только учебными модулями. Он связан выбором проектов, преподавателей, участием в различных мероприятиях, курсов ДПО и т.п. Результаты выбора формируют цифровой след обучающегося. На правильность выбора влияет множество факторов, включая цифровой след и имеющуюся цель (например, занять ту или иную должность в компании).  Для того чтобы учесть все эти факторы разрабатывается рекомендательная машина, которая помогает обучающемуся сделать правильный выбор. В данном проекте необходимо разрабатывать модули рекомендательной машины: шину данных для работы с множеством разных источников; модуль предобработки данных для преобразования исходных данных к виду и качеству необходимому для рекомендательных моделей ядро машинного обучения для подключения разных систем машинного обучения и выполнения на них различных моделей и алгоритмов машинного обучения модуль управления, обеспечивающий как формирование рекомендаций, так и переобучение рекомендательных моделей.  . Обязательно должен: знать: принципы выполнения машинного обучения, ООП уметь: изучать open source системы владеть: языками программирования Python, Java. Желательно должен: знать: принципы работы рекомендательных машин, шин данных, движков машинного обучения уметь: строить сложные программные системы из различных компонент владеть: Apach Spark, Apach Drill, scikit-learn и др. В результате получит: знать: работу рекомендательных машин, шин данных, движков машинного обучения уметь: строить сложные программные системы из различных компонент владеть: Apach Spark, Apach Drill, scikit-learn и др. ",
    "need_match": true
  },
  {
    "id_rpd": 1447,
    "id_proj": 43,
    "name_rp": "Моделирование нелинейных динамических систем",
    "name_proj": "Нелинейная динамика и приложения теории хаоса",
    "text_rp": "Дисциплина направлена на ознакомление студентов с особенностями нелинейного поведения динамических систем, раскрытие закономерностей нелинейных процессов, возникающих в процессе проектирования и эксплуатации комплексных технических систем. Предусматривает овладение методами научных исследований в области теоретической и экспериментальной нелинейной динамики, современным инструментарием анализа поведения динамических систем и его имплементацией в средах графического программирования. Знакомит с математическим аппаратом описания нелинейных систем и процессов, а также с приемами и подходами для их моделирования на современных цифровых вычислителях.. Формирование у студентов устойчивых представлений о фундаментальном характере нелинейных процессов в природных и технических системах, положительных и отрицательных эффектах нелинейного поведения, областях практического применения детерминированного хаоса. Изучение научных и технических проблем, связанных с теорией и практикой нелинейной динамики, причин и механизмов возникновения хаотических режимов в динамических системах. Приобретение знаний в области математического аппарата нелинейных дифференциальных уравнений, умений идентификации динамических систем, дискретных интегрирующих операторов. Приобретение умений в области анализа и обработки результатов вычислительного и полунатурного эксперимента с использованием современной вычислительной техники и сред графического программирования. Освоение навыков анализа и обобщения бифуркационного поведения систем, способствующее пониманию природы детерминированного хаоса и феномена катастроф.. . Министерство науки и высшего образования Российской Федерации ФГАОУ ВО «Санкт-Петербургский государственный электротехнический университет «ЛЭТИ» имени В.И. Ульянова (Ленина)» ____________________________________________________________ ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 1 Дисциплина Моделирование нелинейных динамических систем ФКТИ 1. Что такое аттрактор? Какие аттракторы называются странными? 2. Практическая задача. Постройте график поведения решения хаотической системы, описывающей аттрактор Рёсслера, во временной области. В качестве численного метода решения ОДУ используйте неявный метод Трапеций.   УТВЕРЖДАЮ Заведующий кафедрой                                                   Н.Г. Рыжов. Введение. Предпосылки возникновения и история нелинейной динамики. Работы Э. Лоренца, А. Пуанкаре, Д. Спротта. Хаотические процессы в природе на примере Солнечной системы, турбулентности, погодных явлений. Важность учета нелинейностей при проектировании технических объектов. Тема 1. Общие сведения о динамических системах. Способы описания динамических систем. Дифференциальное исчисление. Уравнения в частных производных, обыкновенные уравнения, дифференциально-алгебраические уравнения. Форма пространства состояний. Передаточные функции и типовые звенья. Операторный метод. Тема 2. Нелинейные системы и процессы. Виды и причины возникновения нелинейностей в природе и технике. Основные типы нелинейностей, встречающиеся в математических моделях динамических систем. Нелинейности, связанные с переходом от дифференциальных уравнений к конечно-разностным схемам. Шаг дискретизации как параметр нелинейности. Тема 3. Моделирование динамических систем в средах графического программирования. Среда LabVIEW как инструмент моделирования динамических систем. Понятие виртуального прибора. Лицевая панель и блок-диаграмма. Модуль Simulation Module. Переход от графической модели к исполняемому коду. Оптимизация производительности. Виртуальный прибор построения бифуркационных диаграмм. Тема 4. Дискретные нелинейные отображения. Логистическое отображение. Отображение Богданова. Отображение Хенона. Экспоненциальное отображение. Отображение Фейгенбаума. Тема 5. Численные методы интегрирования при моделировании нелинейных динамических систем. Численный метод интегрирования как способ перехода от непрерывных моделей динамических систем к конечно-разностным схемам. Явные методы численного интегрирования. Экстраполяционные методы. Полуявные методы интегрирования. Реверсивность и симметричность методов. Оценка производительности численных методов с помощью графика эффективности. Тема 6. Детерминированный хаос. Хаотические процессы и явления. Явление детерминированного хаоса. Плотность фазовых орбит. Топологическое смешивание. Чувствительность к начальным условиям. Фрактальность решений хаотических систем. Типы бифуркаций. Фазовое пространство. Тема 7. Алгоритмы и инструменты анализа хаотических систем. Одномерные бифуркационные диаграммы. Двумерные бифуркационные диаграммы. Каскады Фейгенбаума. H-диаграммы хаотических систем. Отображение фазовых портретов системы и ошибки моделирования. Вычисление ляпуновских экспонент. Обнаружение хаотического поведения в произвольных сигналах. Тема 8. Синхронизация хаотических систем. Общие принципы хаотической синхронизации. Унимодальная и бимодальная синхронизация. Поиск оптимального значения коэффициента синхронизации. Синхронизация дискретных моделей хаотических систем, полученных различными численными методами. Различные топологические схемы при синхронизации хаотических систем. Синхронизация аналоговых и дискретных моделей хаотических систем. Тема 9. Практические приложения детерминированного хаоса. Сенсорные элементы на основе хаотических систем. Осциллятор Дуффинга как высокочувствительный детектор гармонических сигналов. Металлодетекторы на основе принципа синхронизации. Хаос в шифровании и защищенных системах связи. Заключение. Подведение итогов курса. Перспективы развития и внедрения нелинейных решений в теорию и практику автоматического управления, цифровой обработки сигналов и систем связи.",
    "text_proj": "Нелинейная динамика и приложения теории хаоса. Создание математических основ решения прикладных задач с использованием адаптивных дискретных отображений Разработка программного обеспечения для автоматизации компьютерного эксперимента и визуализации хаотической динамики Основы скрытной передачи данных. Хаотические системы связи. Стеганография Разработка приложений-мессенжеров с шифрованием сообщений на основе теории хаоса Разработка средств шифрования изображений, текста, потокового видео с применением теории динамического хаоса. Сравнительное исследование криптостойкости хаотических и традиционных алгоритмов Разработка способов обнаружения факта передачи данных в хаотических системах связи Разработка новых способов модуляции и демодуляции хаотических сигналов Синтез математического описания новых дискретных хаотических систем Разработка методов обработки хаотических сигналов Публикация результатов в высокорейтинговых изданиях. Английский язык - Upper Intermediate или выше. Навыки программирования Базовая алгебра. Спецразделы математики, дифференциальные уравнения с дробной производной, теория информации, теория обработки сигналов. Знания в области современной нелинейной динамики State-of-the-art в области численных методов моделирования нелинейных систем Опыт разработки криптографических приложений Знания о перспективных алгоритмах шифрования и скрытной передачи данных Навыки написания и публикации статей в международной научной периодике. ",
    "need_match": true
  },
  {
    "id_rpd": 1098,
    "id_proj": 56,
    "name_rp": "Обработка изображений и компьютерное зрение  (OpenCV)",
    "name_proj": "Практика в проектах по автономному транспорту от АО \"НИИАС\" РЖД",
    "text_rp": "Рассматриваются основные задачи, модели, методы и алгоритмы в области цифровой обработки изображений. Показывается процесс формирования изображения в оптической системе, описываются возникающие дефекты. Вводится понятие качества изображения, формулируются основные задачи увеличения качества изображения. Излагаются основные методы цифровой обработки изображений (фильтрация, интерполяция, сегментация, бинаризация и др.), элементы геометрической оптики (перспективные преобразования, эпиполярная геометрия, обобщенные координаты, фундаментальная и существенные матрицы), представление изображений виде графа, связанность, применение теории графов в обработке изображений. Рассматриваются основные методы кодирования изображений и видеоинформации, 3D-изображения.. Изучение основных задач, моделей, методов и алгоритмов в области цифровой обработки изображений. Формирование основных задач увеличения качества изображения. Знание основных задач, моделей, методов и алгоритмов в области цифровой обработки изображений. Умение решать основные задачи увеличения качества изображения. Навыки освоения основных методов цифровой обработки изображений (фильтрация, интерполяция, сегментация, бинаризация и др.), основных методов кодирования изображений и видеоинформации, 3D-изображения.. . Примеры вопросов для формирования билетов: 1.       Получение компилятора и настройка CMake 2.       Изображения с широким динамическим диапазоном. Введение. Место дисциплины в ООП. Виды контроля и аттестации. Тема 1. Работа с файлами изображений и видео. 1. Введение в OpenCV 2. Загрузка и установка OpenCV 3. Получение компилятора и настройка CMake 4. Компиляция и установка библиотеки 5. Структура каталогов OpenCV 6. Создание проекта, включающего OpenCV 7. Чтение и запись файлов изображений 8. Чтение и запись видеофайлов. Тема 2. Инструменты обработки изображений. 1. Основные типы данных 2. Доступ к пикселям 3. Хронометраж 4. Типичные операции над изображениями 5. Арифметические операции 6. Сохранение данных 7. Гистограммы. Тема 3. Коррекция и улучшение изображений. 1. Фильтрация изображений. Сглаживание. Повышение резкости. Работа с пирамидами изображений. Пирамиды Лапласа 2. Морфологические операции 3. LUT-фильтры 4. Геометрические преобразования. Аффинное преобразование 5. Ретуширование 6. Очистка от шумов. Тема 4. Работа с цветом. 1. Цветовые пространства 2. Сегментация на основе цветового пространства. HSV-сегментация. YCrCb-сегментация 3. Цветоперенос. Тема 5. Обработка видео. 1. Стабилизация видео 2. Сверхвысокое разрешение 3. Сшивка изображений. Тема 6. Вычислительная фотография. 1. Изображения с широким динамическим диапазоном 2. Создание HDR-изображений 3. Тональная компрессия 4. Совмещение 5. Экспозиционное объединение 6. Бесшовное клонирование 7. Обесцвечивание 8. Нефотореалистичный рендеринг. Заключение. Основные выводы по курсу.",
    "text_proj": "Практика в проектах по автономному транспорту от АО \"НИИАС\" РЖД. АО “НИИАС” РЖД приглашает студентов на практику в проекты по автономному транспорту: Проекты по автоматизации управления движением беспилотных поездов. Пожелания к кандидатам: уверенное владение Linux и Bash, Qt, Python, SQL базами данных. Проект по высокоточной системе позиционирования (отдел Математического обеспечения систем управления АО “НИИАС” РЖД). Пожелания к кандидатам: знания прикладной математики, алгоритмов, моделирования, Python. Технологии проекта: SLAM, фьюзинг данных от датчиково-навигационного оборудования различного типа. Проект: Автоматизированная калибровка камер. Пожелания: Знания в области Компьютерного зрения, Проективной геометрии. На базе АО «НИИАС» РЖД можно пройти производственную практику, а также написать диплом.   Сроки практики -- 1-3 месяца. Обязательно должен: знать: основны алгоритмов и структур данных уметь: работать с методами прикладной математики, с языком программирования Python владеть: основными технологиями разработки алгоритмов и программного обеспечения. Желательно должен: знать: основы компьютерного зрения, проективной геометрии.  уметь: применять основные методы компьютерного зрения и проективной геометрии.  владеть: Linux и Bash, Qt, Python, SQL базами данных. В результате получит: знания: основ позиционирования, калибровки камер, технологий беспилотного транспорта умения: применять основные методы позиционирования, калибровки камер, беспилотного транспорта опыт: работы в реальном проекте по беспилотному транспорту, разработки систем компьютерного зрения и проективной геометрии для решения реальных задач, опыт применения технологий совместной разработки . ",
    "need_match": true
  },
  {
    "id_rpd": 2195,
    "id_proj": 38,
    "name_rp": "Основы гидроакустики",
    "name_proj": "Разработка системы звукоподводной связи на основе теории хаоса",
    "text_rp": "2 АННОТАЦИЯ ДИСЦИПЛИНЫ «ОСНОВЫ ГИДРОАКУСТИКИ» Дисциплина «Основы гидроакустики» предназначена для изучения студентами основных законов распространения звуковых колебаний в морской среде с учетом потерь на распространение и затухание различных волновых структур, условий формирования звуковых каналов в морях и океанах. В дисциплине изучается формирование отраженных гидроакустических (гидролокационных) сигналов от тел простой и сложной геометрической формы с учетом соотношения размеров тел и длин волн облучающих звуковых колебаний, формирование шумовых гидроакустических полей и реверберационных помех, обусловленных рассеянием зондирующих сигналов на поверхностях и неоднородностях морской среды . Получение студентами базовых знаний по гидроакустике с возможным их расширением в процессе работы по этой дисциплине. 1. Изучение условий формирования отраженных и шумовых гидроакустических сигналов и распространение их в материалах тел и морской среде. 2. Формирование у студентов умения и навыков по выполнению расчетов распространения гидроакустических сигналов и дальностей обнаружения шумовых и гидролокационных целей, а также умения пользоваться дополнительными литературными источниками по гидроакустике. Знания основных законов распространения звуковых колебаний в морской среде с учетом потерь на распространение и затухание различных волновых структур, условий формирования звуковых каналов в морях и океанах. Знания условий формирование отраженных гидроакустических (гидролокационных) сигналов от тел простой и сложной геометрической формы с учетом соотношения размеров тел и длин волн облучающих звуковых колебаний, формирование шумовых гидроакустических полей и реверберационных помех, обусловленных рассеянием зондирующих сигналов на поверхностях и неоднородностях морской среды. Умения определять потери при распространении звуковых колебаний в морской среде за счет расширения фронта волны и поглощения звука в морской среде в зависимости от частоты колебаний и глубины моря. Умения рассчитывать скорость звука в море в зависимости от температуры, солености и глубины моря. Умения строить уравнения активной и пассивной гидролокации. Умения выполнять расчеты энергетической дальности обнаружения целей в однородной среде. Иметь навыки по выполнению расчетов потерь распространения гидроакустических сигналов в морской среде и дальностей обнаружения гидроакустических целей, а также умения пользоваться дополнительными литературными источниками по гидроакустике.. . Министерство науки и высшего образования Российской Федерации ФГАОУ ВО «Санкт-Петербургский государственный электротехнический университет «ЛЭТИ» имени В.И. Ульянова (Ленина)» ____________________________________________________________ ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 11 Дисциплина: Основы гидроакустики  1. Приповерхностный звуковой канал.  2. Отражение и рассеяние звуковых колебаний от поверхности моря. 3. Морская среда является однородной средой. УТВЕРЖДАЮ Заведующий кафедрой                                                   И.И. Иванов. Введение. История развития гидроакустики. Ученые, которые внесли большой вклад в развитие гидроакустики. Ведущие гидроакустические организации России, разрабатывающие гидроакустические комплексы. Вопросы, изу-чаемые в данной дисциплине. Литературные источники. Физические свойства морской среды. Физические свойства морской среды. Отличие морской среды от твердых тел и газообразной среды. Сжимаемость воды, упругие свойства, соленость, вязкость, теплоемкость морской воды. Электрические характеристики морской воды. Волновые процессы в стратифицированной среде. Волновые процессы в стратифицированной среде. Рассмотрение морей и океанов как стратифицированной среды. Формирование и распространение внутренних волн в морской стратифицированной среде. Модели акустического поля. Модели акустического поля. Описание моделей акустических полей в зависимости от условий их распространения (дальностей, глубины моря, длины волн и др.) с помощью функций Бесселя, Ханкеля. Приближенные методы представления гидроакустических полей. Приближенные методы представления гидроакустических полей. Усло-вия применения лучевой теории. Уравнение эйконала. Профиль скорости звука в глубоком море. Профиль скорости звука в глубоком море. Приповерхностный слой. Сезонный термоклин. Основной термоклин. Глубоководный изотермический слой. Приповерхностный звуковой канал. Приповерхностный звуковой канал. Условия распространения звуковой энергии в приповерхностном канале. Построение лучевой картины. Подводный звуковой канал. Подводный звуковой канал. Открытие подводного звукового канала. Условия распространения звуковой энергии в подводном звуковом канале. Искажение формы импульсных сигналов при дальнем распространении в подводном канале. Каустики и зоны конвергенции. Каустики и зоны конвергенции. Условия их формирования. Концентрация звуковой энергии. Внутренние звуковые каналы. Внутренние звуковые каналы. Условия их формирования. Распространение звуковой энергии по внутренним звуковым каналам. Распространение звука в арктических морях. Распространение звука в арктических морях. Влияние низких температур воды на скорость распространения звука вблизи поверхности моря. Лучевые картины распространения звука в арктических морях. Каналы в мелком море. Каналы в мелком море. Лучевая теория. Теория нормальных мод. Потери при распространении звука в мелком море. Основные свойства реверберационных помех. Основные свойства реверберационных помех. Сила обратного рассеяния. Модель реверберации. Зависимость реверберации от условий излучения и движения носителей антенны. Формирование гидроакустических сигналов, отраженных от тел простой геометрической формы. Формирование гидроакустических сигналов, отраженных от тел простой геометрической формы. Определение тел простой геометрической формы. Сила цели. Зависимость силы цели от соотношения размеров тела к длине волны. Условия распространения дифракционных звуковых волн внутри тел простой формы. Незеркальное отражение. Гидроакустические сигналы, отраженные от тел сложной геометрической формы. Гидроакустические сигналы, отраженные от тел сложной геометрической формы. Определение тел сложной геометрической формы. Зависимость формы отраженного сигнала от условий отражения и рассеяния звука. Расширение спектра эхо-сигнала за счет эффекта Доплера. Условия обработки сложных сигналов. Формирование шумовых гидроакустических полей. Формирование шумовых гидроакустических полей. Источники формирование полей. Гидродинамический шум. Монополи, диполи, квадруполи. Шумы механизмов. Распознаваемые параметры тел в гидроакустике. Распознаваемые параметры тел в гидроакустике. Габариты тел. Формы тел. Толщины оболочек. Материалы тел.",
    "text_proj": "Разработка системы звукоподводной связи на основе теории хаоса. Создание программного и аппаратного обеспечения системы звукоподводной связи для подводных роботов.  Разработка прототипа системы.  Полевые испытания системы на водоеме в различных условиях.  Исследования свойств сигналов различного типа при прохождении водной среды. . Навыки работы в команде, базовые навыки программирования, мотивация к труду. Инструмент выдадим, работать научим. Знания о системах передачи данных в водной среде. Базовые знания в области гидроакустики. Знания о способах модуляции и демодуляции акустических сигналов, включая широкополосные и биологически инспирированные сигналы. Навыки в области проектирования электронных систем. Опыт водной экспедиции для полевых испытаний прибора. Опыт постановки и обработки результатов эксперимента. ",
    "need_match": true
  },
  {
    "id_rpd": 5089,
    "id_proj": 31,
    "name_rp": "Глубокое обучение",
    "name_proj": "Определение состояния автомобиля используя видео",
    "text_rp": "Глубокое обучение является передовой областью современного машинного обучения и входит в общую проблематику искусственного интеллекта. В данном курсе основным инструментом для решения прикладных задач являются многослойные искусственные нейронные сети. Рассматриваются основные базовые архитектуры сетей глубокого обучения: многослойные полносвязные сети прямого распространения, сверточные сети, рекуррентные сети. Обсуждаются теоретические и практические аспекты их обучения, оптимизации модели, интерпретации и анализа результатов и процесса их обучения. Особое внимание уделяется практической имплементации глубоких архитектур, с использованием платформ Keras, TensorFlow. Рассматривается ряд современных задач и алгоритмов глубокого обучения: автокодировщики, генеративно-состязательные сети, сети для решения задач машинного перевода, генерации текстов, современные сверточные архитектуры для задач компьютерного зрения. Цель дисциплины: изучение основных методов глубокого обучения и их прикладных аспектов в современных задачах математического моделирования и обработки данных. Задачи дисциплины: формирование практических навыков разработки архитектуры нейронных сетей, их применения к практическим задачам, и программной имплементации. Приобретение знаний основных архитектур искусственных нейронных сетей, теоретических и практических аспектов их обучения. Формирование умений компетентного анализа результатов обучения глубокой архитектуры, навыков анализа и устранения основных проблем, мешающих их правильной работе и обучению. Освоение навыков работы с платформами TensorFlow, Keras, PyTorch для реализации и обучения искусственных нейронных сетей. Формирование навыков работы с академической и справочной литературой по тематике, культуры правильной постановки исследовательской задачи и работы с экспериментом.. В течение семестра выдаются индивидуальные домашние задания по следующим темам: Построение и обучение нейронной сети прямого распространения для решения задачи простой регрессии. Построение и обучение нейронной сети прямого распространения для решения задачи классификации. Построение и обучение сверточной нейронной сети для решения задачи классификации изображений. Построение и обучение рекуррентной нейронной сети для работы с последовательностью. Простые автокодировщики и генеративные задачи. Образец индивидуального домашнего задания: Индивидуальное домашнее задание: Построение и обучение сверточной нейронной сети для решения задачи классификации изображений. Дисциплина Глубокое обучение  ФКТИ Требования к выполнению ИДЗ: 1. Постройте и обучите простую CNN, решающую задачу классификации изображений датасета  \"Fashion MNIST\". 2. Добейтесь 95% точности. Проанализуруйте влияниение стандартных методов регуляризации( dropout, l2-регуляризация, инициализация по Хавье, зашумление выборки) на качество обучения сети. 3. Постройте матрицу ошибок и графики основных метрик. 4. Используя дополнительные библиотеки, проведите визуализацию активаций на нескольких сверточных слоях. 5. Дополнительно: проведите adversarial-атаку на построенную сеть и предъявите пример изображения, визуально неотличимого от правильно классифицируемого, но на котором сеть выдает ошибку классификации.. Пример контрольной (проверочной), выполняемой в виде индивидуального проекта: Индивидуальный проект Семантическая разметка изображения на базе предобученной сети VGG19 Дисциплина Глубокое обучение  ФКТИ Требуется построить и обучить архитектуру полносверточной сети, для решения задачи семантической сегментации изображений. В качестве базовой сверточной сети, выделяющей признаки, предлагается взять сеть VGG19. Необходимо на ее основании построить и обучить архитектуру полносверточной сети, для решения задачи семантической сегментации изображений. Министерство науки и высшего образования Российской Федерации ФГАОУ ВО «Санкт-Петербургский государственный электротехнический университет «ЛЭТИ» имени В.И. Ульянова (Ленина)» ____________________________________________________________ ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 1 Дисциплина Глубокое обучение  ФКТИ 1. Параметры и гиперпараметры. Обучающая, тестовая и валидационная выборка. Недообучение и переобучение.   2. Слои с памятью. Сети долгой кратковременной памяти (LSTM). Архетиктура Gated Recurrent Unit (GRU). 3. Показ и защита индивидуального проекта: \"Семантическая разметка изображения на основании предобученной сети VGG19\". УТВЕРЖДАЮ Заведующий кафедрой                                                   С.Н. Поздняков. Введение. История возникновения и основные этапы развития искусственных нейронных сетей. Обзор прикладных задач, решаемых глубоким обучением. Напоминание основных элементов модели перцептрона и искусственных нейронных сетей прямого распространения. Вероятностный подход к машинному обучению. Обучение искусственных нейронных сетей. Проблема XOR. Граф вычислений и дифференцирование на графе вычислений. Полносвязные нейронные сети. Функции активации и их варианты. Метод обратного распространения ошибки. Стохастический градиентный спуск. Слои и векторизация. Регуляризация в глубоком обучении. Регуляризация в глубоком обучении. L1 и L2- регуляризация весов. Аугментация выборки. Ансамбли моделей. Dropout. Численная оптимизация в глубоком обучении. Численная оптимизация в глубоком обучении. Метод моментов, метод Нестерова. Адаптивные модификации стохастического градиентного спуска. Нормализация по мини-батчам. Инициализация весов. Сверточные нейронные сети. Биологическая модель зрения. Операция свертки и взятия максимума. Сверточный нейрон. Сверточные нейронные сети. Современные сверточные архитектуры. Автокодировщики. Примеры приложений в задачах компьютерного зрения. Рекуррентные нейронные сети. Задачи обработки последовательностей. Рекуррентные нейронные сети (RNN). Обучение рекуррентных сетей и обратное распространение ошибки сквозь время (BPTT). Слои с памятью. Сети долгой кратковременной памяти (LSTM). Архетиктура Gated Recurrent Unit (GRU). Генеративные сети. Вероятностная постановка генеративной задачи. Генеративные сети. Генеративно-состязательные искусственные нейронные сети (GAN). Автокодировщики. Вариационные автокодировщики (VAE). Машинный перевод и генерация текстов. Задачи автоматической обработки текстов. Векторные представления слов (Word Embeddings). Сверточные сети для текстов. Модели seq2seq. Рекуррентные сети с механизмом внимания (Attention). Заключение. Общие выводы по курсу. Рекомендации для подготовки к экзамену.",
    "text_proj": "Определение состояния автомобиля используя видео. Цель работы: определять направление движения автомобиля, его остановки и старты по видеозаписи с видеорегистратора. Приложение, используя машинное обучение (или другие алгоритмы и технологии), определяет и классифицирует состояние автомобиля по видеозаписи с видеорегистратора: стоит автомобиль или движется, направление движения автомобиля (движется по прямой, вперед или назад, повернул направо/налево). Сначала сеть обучают (на имеющихся размеченных данных) и тестируют на десктопе. На телефон устанавливается пред-обученная версия (например, \"легкая\" версия tensorflow) с готовой моделью, которая производит обработку видеосигнала. Что требуется: Провести анализ имеющихся решений (state of the art); Установить выбранный фреймворк; Изучить архитектуру и возможности выбранного фреймворка, библиотек; Реализовать алгоритм классификации (предобработка данных, модель нейронной сети); Разделить имеющийся датасет (видеозаписи с размеченными состояниями автомобиля, в котором установлен видеорегистратор) на два набора: для обучения модели и для тестирования модели; Выполнить эксперименты на размеченных данных для получения метрик и на неразмеченных данных для исследования генерализации модели; Написать отчет об исследовании, подготовить презентацию. Обязательно должен: знать: Python уметь: работать с Git, использовать Open Source фреймворки и библиотеки, искать необходимые наборы данных в открытом доступе владеть: навыками изучения программного кода, документаций. Желательно должен: знать: принципы работы машинного обучения, предобработки данных уметь: реализовывать модели нейронных сетей, собирать метрики, визуализировать данные владеть: фреймворками TensorFlow или PyTorch, библиотекой OpenCV. В результате получит: знания: технологии машинного обучения, нейронные сети умения: работать с фреймворками машинного обучения опыт: работа с нейронными сетями, проведение экспериментов, подготовка отчетов и презентаций. ",
    "need_match": true
  },
  {
    "id_rpd": 3524,
    "id_proj": 57,
    "name_rp": "Разработка защищенных программных систем",
    "name_proj": "Стажировка в Digital Security по аудиту защищённости ПО  ",
    "text_rp": "Дисциплина посвящена изучению современных подходов к разработке программных систем, устойчивых к вредоносным воздействиям. Рассматриваются методы атак на программные системы, такие как повреждения программной памяти, внедрение кода на стороне клиента или сервера и др., а также методики и свойства современных языков программирования для предотвращения появления уязвимостей подобного рода.. Дисциплина нацелена на получение теоретических знаний о классификации основных уязвимостей в программном обеспечении, подходах к разработке защищенного программного обеспечения, и приобретение практических навыков применения полученных теоретических знаний для решения задач профессиональной деятельности. Задачами дисциплины является приобретение знаний, умений и навыков для написания безопасного кода с использованием специальных конструкций, методов и библиотек различных языков программирования. Получение знаний о методах поиска и эксплуатации основных уязвимостей в программном обеспечении. Формирование умения использовать типовые программные решения, ориентированные на выполнение научных, проектных и технологических задач, анализировать программный код и находить в нем уязвимости. Освоение навыков поиска уязвимостей в программном обеспечении методами «белого» и «черного» ящиков, владением инструментарием для поиска уязвимостей в программном обеспечении (отладчики, фреймворки для эксплуатации ошибок, другие утилиты).. Примеры вопросов к контрольному тесту  Вопрос 3 Чем опасна XSS? 1. Возможно украсть данные пользователя, введенные им при авторизации. 2. Может быть использована для «фишинга» пользователей. 3. Выполняет произвольный код в браузере пользователя. 4. Выполняет произвольный код на сервере. Вопрос 5 Что такое CSRF? 1. Тип атаки на посетителей веб-сайтов, которая заключается в том, что если жертва заходит на сайт, созданный злоумышленником, от её лица тайно отправляется запрос на другой сервер, осуществляющий некую вредоносную операцию. 2. Тип атаки на веб-системы, заключающийся во внедрении в выдаваемую веб-системой страницу вредоносного кода и взаимодействии этого кода с веб-сервером злоумышленника. 3. Уязвимость основанный на внедрении в запрос произвольного SQL-кода. 4. Уязвимость на стороне сервера, который позволяет перенаправлять запросы от одного сервера к другому. Вопрос 7 Есть следующая программа, которая выполняет поиск файла по его имени в текущей директории. Для этого пользователю необходимо передать имя файла в качестве аргумента к программе. Присутствует ли уязвимость в данном участке кода? import java.io.*; public class Example1 { public static void main(String[] args) throws IOException { if(args.length != 1) { System.out.println(\"No arguments\"); System.exit(1); } Runtime runtime = Runtime.getRuntime(); Process proc = runtime.exec(\"find. --name \\”\" + args[0]+”\\””); InputStream is = proc.getInputStream(); InputStreamReader isr = new InputStreamReader(is); BufferedReader br = new BufferedReader(isr); String line; while ((line = br.readLine()) != null) { System.out.println(line); } } } 1. Уязвимости нет 2. SQL инъекция 3. Инъекция команд 4. Инъекция команд и SQL инъекция. Министерство науки и высшего образования Российской Федерации ФГАОУ ВО «Санкт-Петербургский государственный электротехнический университет «ЛЭТИ» имени В.И. Ульянова (Ленина)» ____________________________________________________________ ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 1 Дисциплина Разработка защищенных программных систем ФКТИ 1. Понятие об информационной безопасности и защищенных системах.  2. Организация памяти в современном программном обеспечении. Переполнение буфера на стеке.  УТВЕРЖДАЮ Заведующий кафедрой                                                   К. В. Кринкин. Введение. Информационная безопасность и защищенная система: основные понятия. Законы информационной безопасности в современном мире. Понятие уязвимости в информационной системе. Уязвимости в программных средствах, конфигурационные уязвимости, уязвимости в бизнес-процессах. Классификация уязвимостей в ПО. Тема 1. Аудит информационной безопасности и понятие тестирования на проникновение. Основные методы и подходы при проведении аудита информационной системы и приложений. Типовые примеры эксплуатации уязвимостей и слабостей системы. Подходы к поиску уязвимостей в ПО. Тема 2. Введение в безопасность Web-приложений. Основные уязвимости и понятия, которые встречаются при реализации web-приложений. Тема 3. Уязвимости в Web-приложениях. Внедрение кода на клиенте. Обход аутентификации и CSRF-атаки. Инструментарий для анализа Web-приложений. OWASP-Top 10. Тема 4. Внедрение кода на сервере. Инъекции команд. SQL-инъекции. XML-инъекции и другие типы инъекций. Тема 5. Уязвимости, связанные с манипуляциями программной памяти. Организация памяти в современном программном обеспечении. Переполнение буфера на стеке. Уязвимости в динамической памяти. Уязвимости форматной строки. Инструментарий для поиска уязвимостей. Тема 6. Ошибки, связанные с целочисленным переполнением. Арифметические операции в современных языках программирования. Ошибки и уязвимости, возникающие из-за целочисленного переполнения. Тема 7. Другие классы уязвимостей. Раскрытие информации. «Состояние гонки». Некорректная обработка исключений. Слабости в реализации криптографических модулей приложения. Тема 8. Уязвимости вне программных средств. Некорректная конфигурация. Уязвимости, связанные с политикой безопасности и бизнес-процессами в организации. Социальная инженерия. Тема 9. Изучение программных средств для анализа кода. Средства для статического и динамического анализа исходного кода приложений. Декомпиляция приложений. Заключение. Общие выводы по курсу. Информационная безопасность и современные угрозы. Рекомендации для подготовки к экзамену.",
    "text_proj": "Стажировка в Digital Security по аудиту защищённости ПО. Summ3r 0f h4ck 2022. Обучающая программа в Digital Security Digital Security приглашает на традиционную летнюю обучающую программу «Summ3r 0f h4ck». Она пройдет c 4 по 29 июля 2022 года в нашем офисе в Санкт-Петербурге. Прием заявок продлится до 1 мая (включительно) Подробности.   https://dsec.ru/about/summerofhack/                 . Обязательно должен: знать: основы информационной безопасности уметь:  программировать на C/C++ владеть: . Желательно должен: знать:  уязвимости ПО уметь:  программировать на JS, PHP, Python владеть: . В результате получит: знания:  способы поиска уязвимостей в приложениях на С\\С++  и в веб-приложениях  ( умения:  применение методов white-box и black-box, полезные трюках при reverse engineering (IDAPython, Ghidra, DBI), премудростях фаззинга приложений (KLEE, libfuzz, AFL), пентестинг веб-приложений опыт: аудита программного обеспечения. Начало стажировки. Сбор заявок на стажировку . Завершение стажировки. Защита отчетов по выполненным работам. ",
    "need_match": true
  },
  {
    "id_rpd": 3514,
    "id_proj": 26,
    "name_rp": "Технологии автоматизации процесса разработки программного обеспечения",
    "name_proj": "Программно-аппаратное конфигурирование сети лаборатории",
    "text_rp": "В курсе рассматриваются вопросы организации процессов непрерывной интеграции, непрерывного развертывания и непрерывной поставки ПО в рамках парадигмы DevOps. Изучаются современные технологии автоматизации процесса разработки - Docker, Docker-Compose, Jenkins. Рассматриваются примеры использования технологий для проектов различной специфики. . Целью дисциплины является изучение фундаментальных концепций методологии DevOps в области задач непрерывной интеграции, непрерывного развертывания и непрерывной поставки и приобретение навыков использования полученных знаний в профессиональной деятельности. Задачами является приобретение знаний, умений и навыков применения фундаментальных концепций методологии DevOps в области задач непрерывной интеграции, непрерывного развертывания и непрерывной поставки. Получение знаний основных принципов автоматизации настройки среды, автоматизации тестирования и развертывания ПО. Формирование умения использовать современные технологии и инструменты автоматизации процесса разработки ПО. Приобретение навыков работы с современными программными средствами автоматизации тестирования, настройки среды и развертывания.. В ходе практических занятий и самостоятельной работы студенты должны выполнить проектную работу по разработке программного обеспечения (ПО) с использованием технологий автоматизации процесса разработки программного обеспечения.  Целью работы является разработка программного продукта по заданной теме. Разработка проводится итеративно в 3 этапа. Для контроля и оценивания  предусмотрены 3 контрольные точки в виде доклада с презентацией по этапам разработки.  Презентация должна быть представлена на 8 - 10 минут с демонстрацией min - 10, max - 15 слайдов, и содержать в себе:  1. Постановку задачи. 2. Методы решения, технологии. 3. Полученные результаты. В качестве результатов в презентации должны быть представлены артефакты методологии разработки, программный код и материалы, демонстрирующие работу ПО.  4. Примеры использования. 5. Список использованных источников (min - 3, max - не ограничено). Доклад по результатам работы с использованием презентации должен быть выполнен в устной форме.  Примерные сквозные темы разработок и докладов: Генератор условий задач по курсу \"Базы данных\". Генерация сессий прокторинга с использованием облачных хранилищ. Применение среды разработки WEB IDE в Duckietown Dashboard. Разработка Autolab Remote Control Service. OpenSource Веб-сервис для 3d-реконструкции.. . Министерство науки и высшего образования Российской Федерации ФГАОУ ВО «Санкт-Петербургский государственный электротехнический университет «ЛЭТИ» имени В.И. Ульянова (Ленина)» ____________________________________________________________ ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 1 Дисциплина Технологии автоматизации процессов разработки программного обеспечения   ФКТИ 1. Проверки на этапе компиляции ПО. Интеграционное тестирование.  2. Модели жизненного цикла. УТВЕРЖДАЮ Заведующий кафедрой                                                   К.В. Кринкин. Введение. Идеология DevOps. Постановка задач непрерывной интеграции, непрерывного развертывания и непрерывной поставки. Тема 1. Организация автоматического тестирования ПО. Этапы и способы проверки исходного кода и ПО в целом. Статический анализ исходного кода. Юнит-тестирование. Проверки на этапе компиляции ПО. Интеграционное тестирование. Дополнительные проверки в процессе тестирования (время выполнения, косвенные метрики оценки работы ПО в тестах). Требования к организации отчетов о запуске автоматических тестов. Техническая реализация автоматизации тестирования (precommit hooks, периодическое тестирование и тестирование по мере поступления изменений). Тема 2. Инструменты автоматизации настройки среды. Задача автоматизации настройки среды. Технология Docker - контейнеры, образы, репозитории. Синтаксис Dockerfile. Флаги запуска контейнеров. Ограничение ресурсов контейнера. Отладка контейнеров и контроль работы. Механизм Healthcheck. Тема 3. Инструменты автоматизации развертывания и поставки ПО. Задача автоматизации развертывания и поставки ПО. Технология Docker Compose - конфигурации и сервисы. Синтаксис конфигурационных файлов. Адресация и взаимное обнаружение узлов. Передача внешних параметров в конфигурацию. Команды управления конфигурацией. Отладка работы конфигураций. Тема 4. Серверы непрерывной интеграции. Понятие и назначение сервера непрерывной интеграции. Последовательности шагов для автоматизации интеграции, развертывания и поставки ПО. Jenkins - основные сущности (job, build, view, user, repo, node). Основные элементы настройки Job: периодичность и параметры запуска, репозиторий и настройки клонирования, шаги сборки, послесборочные операции (рассылка писем, запуск других Job). Пример настройки Job. Анализ запусков Job (логи и их интерпретация, артефакты сборки). Особенности эксплуатации сервера непрерывной интеграции на примере Jenkins (хранение конфигураций, разделение доступа к серверу, объем почтовых уведомлений, требуемое дисковое пространство). Заключение. Общие выводы по курсу. Рекомендации для подготовки к экзамену.",
    "text_proj": "Программно-аппаратное конфигурирование сети лаборатории. Видео-презентация проекта https://youtu.be/uLePbMkxzZE Цель данного проекта состоит в построении и отладке программно-аппаратной системы наблюдения и отладки решений на полигоне автономного транспорта лаборатории мобильных интеллектуальных систем.  Задачи: Настройка системы управления конфигурациями Ansible на парке машин лаборатории интеллектуальных мобильных систем Разработка решения захвата видео камеры наблюдения полигона в трансляцию конференций Zoom Тестирование онлайн-курса по GDB и Valgrind Формат работы: смешанный: заочный + очный Очно в аудитории 3501 Прототипирование при отсутствии необходимости работы с оборудованием возможно выполнять дистанционно. Ориентировочно 2-3 курс Навык работы с ОС Linux (Ubuntu) Знание языка Си, основ отладки программ Умение самостоятельно находить информацию, учиться новому Умение следовать инструкции Аккуратность  Умение пользоваться отверткой Знание английского языка на уровне чтения технической документации Понимание базовых принципов организации ЛВС. Плюсом будет любой опыт работы с библиотеками автоматизации настройки и любой опыт наладки систем видеофиксации. . В результате получит: знания о устройстве систем машинного зрения и систем автоматизированной постановки эксперимента для задач автономного транспорта, умения настройки и отладки реальных роботехнических систем, опыт участия в передовом исследовательском проекте. . Тестовое задание проекта. Составить docker-compose файл, позволяющий запустить 2 докер-контейнера, объединенные в одну локальную сеть (изолированную от сети хост-машины)   Программа-клиент, запущенная в одном контейнере должна передавать строку “docker test #K” по TCP программе-серверу, запущенной во втором контейнере. Программа-сервер должна печатать полученные данные в лог, доступный командой docker log.   #K - порядковый номер сообщения (0, 1, 2, …) Строку передавать раз в секунду   Способ реализации программ клиента и сервера может быть любым (стандартные утилиты / самостоятельно написанные программы / …)   В качестве решения прислать ссылку на репозиторий с docker-compose файлом и инструкцией по запуску. ",
    "need_match": true
  },
  {
    "id_rpd": 1447,
    "id_proj": 42,
    "name_rp": "Моделирование нелинейных динамических систем",
    "name_proj": "Перспективные сенсоры на основе теории динамического хаоса",
    "text_rp": "Дисциплина направлена на ознакомление студентов с особенностями нелинейного поведения динамических систем, раскрытие закономерностей нелинейных процессов, возникающих в процессе проектирования и эксплуатации комплексных технических систем. Предусматривает овладение методами научных исследований в области теоретической и экспериментальной нелинейной динамики, современным инструментарием анализа поведения динамических систем и его имплементацией в средах графического программирования. Знакомит с математическим аппаратом описания нелинейных систем и процессов, а также с приемами и подходами для их моделирования на современных цифровых вычислителях.. Формирование у студентов устойчивых представлений о фундаментальном характере нелинейных процессов в природных и технических системах, положительных и отрицательных эффектах нелинейного поведения, областях практического применения детерминированного хаоса. Изучение научных и технических проблем, связанных с теорией и практикой нелинейной динамики, причин и механизмов возникновения хаотических режимов в динамических системах. Приобретение знаний в области математического аппарата нелинейных дифференциальных уравнений, умений идентификации динамических систем, дискретных интегрирующих операторов. Приобретение умений в области анализа и обработки результатов вычислительного и полунатурного эксперимента с использованием современной вычислительной техники и сред графического программирования. Освоение навыков анализа и обобщения бифуркационного поведения систем, способствующее пониманию природы детерминированного хаоса и феномена катастроф.. . Министерство науки и высшего образования Российской Федерации ФГАОУ ВО «Санкт-Петербургский государственный электротехнический университет «ЛЭТИ» имени В.И. Ульянова (Ленина)» ____________________________________________________________ ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 1 Дисциплина Моделирование нелинейных динамических систем ФКТИ 1. Что такое аттрактор? Какие аттракторы называются странными? 2. Практическая задача. Постройте график поведения решения хаотической системы, описывающей аттрактор Рёсслера, во временной области. В качестве численного метода решения ОДУ используйте неявный метод Трапеций.   УТВЕРЖДАЮ Заведующий кафедрой                                                   Н.Г. Рыжов. Введение. Предпосылки возникновения и история нелинейной динамики. Работы Э. Лоренца, А. Пуанкаре, Д. Спротта. Хаотические процессы в природе на примере Солнечной системы, турбулентности, погодных явлений. Важность учета нелинейностей при проектировании технических объектов. Тема 1. Общие сведения о динамических системах. Способы описания динамических систем. Дифференциальное исчисление. Уравнения в частных производных, обыкновенные уравнения, дифференциально-алгебраические уравнения. Форма пространства состояний. Передаточные функции и типовые звенья. Операторный метод. Тема 2. Нелинейные системы и процессы. Виды и причины возникновения нелинейностей в природе и технике. Основные типы нелинейностей, встречающиеся в математических моделях динамических систем. Нелинейности, связанные с переходом от дифференциальных уравнений к конечно-разностным схемам. Шаг дискретизации как параметр нелинейности. Тема 3. Моделирование динамических систем в средах графического программирования. Среда LabVIEW как инструмент моделирования динамических систем. Понятие виртуального прибора. Лицевая панель и блок-диаграмма. Модуль Simulation Module. Переход от графической модели к исполняемому коду. Оптимизация производительности. Виртуальный прибор построения бифуркационных диаграмм. Тема 4. Дискретные нелинейные отображения. Логистическое отображение. Отображение Богданова. Отображение Хенона. Экспоненциальное отображение. Отображение Фейгенбаума. Тема 5. Численные методы интегрирования при моделировании нелинейных динамических систем. Численный метод интегрирования как способ перехода от непрерывных моделей динамических систем к конечно-разностным схемам. Явные методы численного интегрирования. Экстраполяционные методы. Полуявные методы интегрирования. Реверсивность и симметричность методов. Оценка производительности численных методов с помощью графика эффективности. Тема 6. Детерминированный хаос. Хаотические процессы и явления. Явление детерминированного хаоса. Плотность фазовых орбит. Топологическое смешивание. Чувствительность к начальным условиям. Фрактальность решений хаотических систем. Типы бифуркаций. Фазовое пространство. Тема 7. Алгоритмы и инструменты анализа хаотических систем. Одномерные бифуркационные диаграммы. Двумерные бифуркационные диаграммы. Каскады Фейгенбаума. H-диаграммы хаотических систем. Отображение фазовых портретов системы и ошибки моделирования. Вычисление ляпуновских экспонент. Обнаружение хаотического поведения в произвольных сигналах. Тема 8. Синхронизация хаотических систем. Общие принципы хаотической синхронизации. Унимодальная и бимодальная синхронизация. Поиск оптимального значения коэффициента синхронизации. Синхронизация дискретных моделей хаотических систем, полученных различными численными методами. Различные топологические схемы при синхронизации хаотических систем. Синхронизация аналоговых и дискретных моделей хаотических систем. Тема 9. Практические приложения детерминированного хаоса. Сенсорные элементы на основе хаотических систем. Осциллятор Дуффинга как высокочувствительный детектор гармонических сигналов. Металлодетекторы на основе принципа синхронизации. Хаос в шифровании и защищенных системах связи. Заключение. Подведение итогов курса. Перспективы развития и внедрения нелинейных решений в теорию и практику автоматического управления, цифровой обработки сигналов и систем связи.",
    "text_proj": "Перспективные сенсоры на основе теории динамического хаоса. Разработка новых типов датчиков (магнетометров, салинометров, индуктивных датчиков и др.) на основе устройств с хаотическим поведением. Исследование свойств хаотических сигналов при прохождении различных сред Разработка стендов для испытания датчиков различных типов, включая создание электронных схем, корпусирование с применением аддитивных технологий Проведение сравнительных испытаний датчиков традиционной конструкции и предлагаемых решений на основе теории хаоса. Базовые навыки программирования Базовые математические знания - теория дифференциального и интегрального исчисления, алгебра. Знания в области аналоговой и цифровой схемотехники, электрофизики. Новые знания о перспективных конструкциях датчиков на новых физических принципах Практические навыки проектирования электронных устройств Опыт разработки экспериментальных стендов, снятия и обработки результатов полунатурного эксперимента. ",
    "need_match": true
  },
  {
    "id_rpd": 1916,
    "id_proj": 41,
    "name_rp": "Разработка программного обеспечения для  робототехнических систем",
    "name_proj": "Разработка подводного телеуправляемого робота на гусеничном шасси",
    "text_rp": " Цели изучения курса состоят в формировании знаний, умений и навыков применения программных средств, необходимых разработчикам для реализации робототехнический комплексов, формировании у студентов представлений о работе и принципах разработки распределенных систем и их организации; освоении современных инструментов организации вычислений и коммуникации между вычислительными единицами с целью полноценной работы робототехнического комплекса и овладении студентами практических навыков применения программных средств для разработки комплексных робототехнических систем.. Целью дисциплины является получение теоретических знаний в области специального программного обеспечения для робототехнических систем и формирование умений разрабатывать комплексные программные системы на основе фреймворка Robot Operating System и навыков их применения. Задачами дисциплины является: изучение теории разработки программного обеспечения для робототехнических систем; получение навыков разработки программного обеспечения для робототехнических систем; формирование умений организации межпрограммного взаимодействия с применение инструментов фреймворка Robot Operating System. Знания принципов разработки прикладного ПО на базе Robot Operating System в ОС Linux. Умение структурировать собственные разработки по общепринятым концепциям организации кода с размещением в системе контроля версии Git. Владение навыками ознакомления, изучения и применения с возможность доработки и настройки существующих разработок для получения желаемого функционала и результатов выполнения.. Примеры вопросов для коллоквиума 1 Какие базовые типы поддерживаются в сообщениях? Каким образом можно это узнать? Какие базовые этапы необходимо выполнить для создания собственного пакета? Какие шаги необходимы для создания узла на языке Python? Какие шаги необходимы для создания узла на языке С++? Опишите базовые принципы размещения кода в репозитории? В случае одного пакета, стека пакетов? Какие типы связей узлов можно организовать с помощью топиков? Какая CLI утилита позволяет работать с топиками? Какие она имеет команды и для чего они нужны? Какая CLI утилита позволяет работать с сервисами? Какие она имеет команды и для чего они нужны? Опишите основные различия между типоками и сервисами и приведите примеры, когда нужно применять одни, а когда другие? Как создать свое сообщение для топика? Примеры вопросов для коллоквиума 2 Какие типы параметров бывают? В чем их отличие? Возможно ли устанавливать параметры из файла? Если да, какой командой это выполняется? Для чего используется тэг arg в launch-файлах? Напишите пример применения. В чем отличия разработки на основе языка С++ и языка Python для ROS? Нарисуйте и опишите схему, как происходит настройка соединения и коммуникация между узлами по системе топиков? Какова цель мастер-узла в этой схеме? Для чего используется мастер-узел? Возможна ли работа системы без него? Какое назначение имеет система TF? Приведите примеры использования. Какой структурой предоставляются системы координат в TF? Может ли эта структура иметь свойство цикличности? Почему? На каких основных компонентах строится описание части робота в Gazebo? Какие бывают типы соединений частей роботов? Опишите их с иллюстрацией работы. Какая команда выводит полный путь к текущей директории? а) mv б) cd в) rm г) pwd д) ls Какой символ используется для чтения значения переменной? а) $ б) % в) : г) \\textbraceleft\\textbraceright д) ^ Как называется утилита сборки ROS пакетов? а) rosbuild б) catkin make в) catkin build г) ros build Какой утилитой можно перейти в папку пакета? а) rosls б) roscd в) roscat г) rosed д) roslist На основе какого формата создаются launchфайлы? а) JSON б) XML в) HTML г) Launch Какой из параметров тэга <node> launchфайла является обязательным? а) output б) log в) pkg г) ns. Какая команда выводит полный путь к текущей директории? а) mv б) cd в) rm г) pwd д) ls Какой символ используется для чтения значения переменной? а) $ б) % в) : г) {} д) ^ Как называется утилита сборки ROS пакетов? а) rosbuild б) catkin_make в) catkin_build г) ros_build Какой утилитой можно перейти в папку пакета? а) rosls б) roscd в) roscat г) rosed д) roslist На основе какого формата создаются launch-файлы? а) JSON б) XML в) HTML г) Launch Какой из параметров тэга <node> launch-файла является обязательным? а) output б) log в) pkg г) ns. Министерство науки и высшего образования Российской Федерации ФГАОУ ВО «Санкт-Петербургский государственный электротехнический университет «ЛЭТИ» имени В.И. Ульянова (Ленина)» ____________________________________________________________ ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 1 Дисциплина Физические основы электронагрева   ФЭА 1. Закон Ома в дифференциальной форме. Закон Джоуля – Ленца в локальной форме.  2. Снижения уровня термических деформаций и напряжений. 3. Задача. УТВЕРЖДАЮ Заведующий кафедрой                                                   И.И. Иванов. . Основы работы с ОС Linux. Основные команды и принципы работы в командной строке, настройка среды разработки. Основы Robot Operating System. Понятие и назначение ROS. Примеры проектов с применением ROS. Поддержка языков. Базовые понятия в ROS - пакеты, рабочее пространство, сборка. Работа с репозиторием. Организация связи в децентрализованной системе. Знакомство с рабочей экосистемой ROS на момент запуска. Подключение узлов в экосистему. Основные утилиты для получения информации о рабочей экосистеме. Разница узла и процесса. Коммуникации в ROS. Организация асинхронного взаимодействия между узлами. Освоение формата описания запуска множества узлов.launch. Примеры использования и полезные практики применения. Создание типов сообщений для собственных разработок и со специализированным описанием.Освоение навыков с поддержкой функционала сервисов - синхронного метода взаимодействия между узлами. Рассмотрение положительных и отрицательных сторон подхода. Сравнение с топиками. Обсуждение применимости каждого из типов. Организация пространства параметров в ROS. Изучение подходов работы с параметрами в рабочей экосистеме ROS. Изучение утилит для работы с сервером параметров. Обсуждение ситуаций применимости различных видов параметров. Освоение методов работы с параметрами. Рассмотрение примеров применения параметров. Система TF (Transforms) в ROS. Системы координат и их трансформации. Освоение методов работы с TF в ROS. Практика применения утилит для получения информации о TF. Обсуждение ситуаций для применения на практике. Ограничения системы TF. Заключение. Назначение ROS2, отличия от ROS. Другие аппаратные комплексы.",
    "text_proj": "Разработка подводного телеуправляемого робота на гусеничном шасси. Разработка программного и аппаратного обеспечения подводной роботизированной системы на основе гусеничной платформы с манипулятором. Создание телеуправляемого водонепроницаемого шасси. Разработка сенсорной системы робота. Разработка подсистемы управления шасси и манипулятором. Полевые испытания робота на водоеме. Основы Arduino IDE, коммуникабельность, владение английским языком на уровне Basic, общая техническая грамотность. Знание цифровой и аналоговой схемотехники, выносливость, целеустремленность. Знания в области дизайна подводных роботизированных систем. Практические навыки проектирования комплексных объектов робототехники. Опыт разработки программно-аппаратных комплексов общего назначения Незабываемый опыт полевой экспедиции на водоемы нашей необъятной Родины с погружениями за застрявшим роботом. ",
    "need_match": true
  }
]